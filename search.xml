<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Proxy</title>
      <link href="/2020/08/16/Proxy/"/>
      <url>/2020/08/16/Proxy/</url>
      
        <content type="html"><![CDATA[<h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><ul><li>动态代理的意义在于生成一个占位（又称代理对象）， 来代理真实对象， 从而控制真实<br>对象的访问</li></ul><p><img src="/img/proxy/proxy1.png" alt=""></p><ul><li>JDK 动态代理是<code>java.lang.reflect.*</code>包提供的方式，它必须借助一个接口才能产生代理对<br>象,所以先定义接口.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>然后提供实现类HelloWordlmpl 来实现接口.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldimpl</span> <span class="token keyword">implements</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>在JDK 动态代理中，要实现代理逻辑类必须去实现java.lang.reflect.InvocationHandler<br>接口，它里面定义了一个invoke 方法，并提供接口数组用于下挂代理对象.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkProxyExample</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> T target<span class="token operator">=</span>null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//真实对象</span>    <span class="token comment" spellcheck="true">/**     * @param target 真实对象     * @return 代理对象     */</span>    <span class="token keyword">public</span> T <span class="token function">bind</span><span class="token punctuation">(</span>T target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token operator">=</span>target<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * @param proxy 代理对象 bind方法生成对象     * @param method 当前调度方法     * @param args 当前方法参数     * @return 代理结果     * @throws Throwable 异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入代理逻辑方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在调度真实对象之前的服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//相当于调用sayHelloWorld方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在调度真实对象之后的服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>测试JDK动态代理.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkProxyExampleTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJdkProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        HelloWorld proxy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JdkProxyExample</span><span class="token operator">&lt;</span>HelloWorldImpl<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloWorldImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">sayHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>首先通过bind 方法绑定了代理关系，然后在代理对象调度sayHello World 方法时进入<br>了代理的逻辑，测试结果如下.</li></ul><p><img src="/img/proxy/proxy2.png" alt=""></p><hr><h2 id="CGLIB-动态代理"><a href="#CGLIB-动态代理" class="headerlink" title="CGLIB 动态代理"></a>CGLIB 动态代理</h2><ul><li>CGLIB 动态代理,它的优势在于不需要提供接口,只要一个非抽象类就能实现动态代理.</li><li>定义一个类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>CGLIB 的加强者Enhancer,通过设置超类的方法(setSuperclass),然后通过setCallback 方法设置哪个类为它的代理类.参数为this 就意味着是当前对象，那就要求用this 这个对象实现接口Methodinterceptor 的方法一一intercept, 然后返回代理对象.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxyExample</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T target<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token keyword">public</span> T <span class="token function">getProxy</span><span class="token punctuation">(</span>T target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token operator">=</span>target<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//CGLIB enhancer 增强类对象</span>        Enhancer enhancer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置增强类型</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义代理逻辑对象为当前对象,要求当前对象实现MethodInterceptor接口方法</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建并返回代理对象</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 代理逻辑方法     * @param o 代理对象     * @param method 方法     * @param objects 方法参数     * @param methodProxy 方法代理     * @return 代理结果     * @throws Throwable 异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入代理逻辑方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用真实对象前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用真实对象后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>测试CGLIB动态代理</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxyExampleTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCGLIBProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Hello proxy<span class="token operator">=</span> <span class="token punctuation">(</span>Hello<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxyExample</span><span class="token operator">&lt;</span>Hello<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>结果如下.</li></ul><p><img src="/img/proxy/proxy3.png" alt=""></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaAnnotation</title>
      <link href="/2020/06/04/JavaAnnotation/"/>
      <url>/2020/06/04/JavaAnnotation/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-枚举类与注解"><a href="#Java-枚举类与注解" class="headerlink" title="Java 枚举类与注解"></a>Java 枚举类与注解</h1><h2 id="枚举类使用"><a href="#枚举类使用" class="headerlink" title="枚举类使用"></a>枚举类使用</h2><ul><li>枚举类的实现<ul><li><code>JDK 1.5</code>之前需要自定义枚举类.</li><li><code>JDK 1.5</code> 新增的 <code>enum</code>关键字用于定义枚举类.</li></ul></li><li>若枚举只有<code>一个</code>对象, 则可以作为一种单例模式的实现方式.</li><li>枚举类的属性<ul><li>枚举类对象的属性<code>不允许改动</code>, 所以应该使用 <code>private fina</code>修饰.</li><li>枚举类的使用 private final 修饰的属性应该在构造器中为其赋值.</li><li>若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的 传入参数.</li></ul></li></ul><h2 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h2><ul><li><code>私有化</code>类的构造器，保证不能在类的外部创建其对象.</li><li>在类的内部创建枚举类的实例。声明为：<code>public static final.</code></li><li>对象如果有实例变量，应该声明为<code>private final</code>，并在构造器中初始化 .</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String SEASONNAME<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String SEASONDESC<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Season</span><span class="token punctuation">(</span>String SEASONNAME<span class="token punctuation">,</span>String SEASONDESC<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>SEASONNAME<span class="token operator">=</span>SEASONNAME<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>SEASONDESC<span class="token operator">=</span>SEASONDESC<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season SPRING<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season SUMMER<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season AUTUMN<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season WINTER<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"白雪皑皑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="使用enum定义枚举类"><a href="#使用enum定义枚举类" class="headerlink" title="使用enum定义枚举类"></a>使用enum定义枚举类</h2><ul><li>使用 <code>enum</code> 定义的枚举类默认继承了 <code>java.lang.Enum</code>类，因此不能再继承其他类.</li><li>枚举类的构造器只能使用 <code>private</code> 权限修饰符.</li><li>枚举类的所有实例必须在枚举类中显式列出<code>(, 分隔 ; 结尾)</code>。列出的 实例系统会自动添加<code>public static final</code> 修饰.</li><li><code>必须在枚举类的第一行声明枚举类对象.</code></li><li><code>JDK1.5</code> 中可以在 <code>switch 表达式</code>中使用<code>Enum定义的枚举类</code>的对象 作为表达式,<code>case</code>子句可以直接使用枚举值的名字, 无需添加枚举 类作为限定.</li></ul><pre class=" language-Java"><code class="language-Java">enum SeasonEnum{    SPRING("春天","春暖花开"),    SUMMER("夏天","夏日炎炎"),    AUTUMN("秋天","秋高气爽"),    WINTER("冬天","白雪皑皑");    private final String seasonName;    private final String SeasonDesc;    private SeasonEnum(String seasonName,String seasonDesc){        this.seasonName=seasonName;        this.SeasonDesc=seasonDesc;    }}</code></pre><p><img src="/img/javaannotation/1.png" alt=""></p><h2 id="枚举类主要方法"><a href="#枚举类主要方法" class="headerlink" title="枚举类主要方法"></a>枚举类主要方法</h2><ul><li><code>values()</code> : 返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值.</li><li><code>valueOf(String str)</code> : 可以把一个字符串转为对应的枚举类对象.要求字符串必须是枚举类对象的“名字”.如不是，会有运行时异常：<code>IllegalArgumentException.</code></li><li><code>toString()</code>：返回当前枚举类对象常量的名称.</li></ul><h2 id="实现接口的枚举类"><a href="#实现接口的枚举类" class="headerlink" title="实现接口的枚举类"></a>实现接口的枚举类</h2><ul><li>和普通 Java 类一样，枚举类可以实现一个或多个接口.</li><li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只 要统一实现该方法即可.</li><li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式, 则可以让每个枚举值分别来实现该方法.</li></ul><h2 id="注解Annotation"><a href="#注解Annotation" class="headerlink" title="注解Annotation"></a>注解Annotation</h2><ul><li>从 <code>JDK 5.0</code>开始, Java 增加了对<code>元数据(MetaData)</code>的支持, 也就是 <code>Annotation(注解)</code>.</li><li><code>Annotation</code>其实就是代码里的<code>特殊标记</code>, 这些标记可以在编译, 类加 载, 运行时被读取, 并执行相应的处理。通过使用<code>Annotation</code>, 程序员 可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息.代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署.</li><li><code>Annotation</code> 可以像修饰符一样被使用, 可用于<code>修饰包,类, 构造器, 方 法, 成员变量, 参数, 局部变量的声明</code>, 这些信息被保存在 <code>Annotation 的 “name=value”</code>对中.</li><li>在<code>JavaSE</code>中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等.在<code>JavaEE/Android</code>中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替<code>JavaEE</code>旧版中所遗留的繁冗代码和<code>XML</code>配置等.</li><li>未来的开发模式都是基于注解的，<code>JPA</code>是基于注解的，<code>Spring2.5</code>以上都是基于注解的，<code>Hibernate3.x</code>以后也是基于注解的，现在的 <code>Struts2</code>有一部分也是基于注解的了，注解是一种趋势，一定程度上 可以说：<code>框架 = 注解 + 反射 + 设计模式</code>.</li><li>使用<code>Annotation</code>时要在其前面增加 <code>@ 符号</code>, 并把该<code>Annotation 当成 一个修饰符使用</code>.用于修饰它支持的程序元素.</li></ul><h2 id="生成文档相关的注解"><a href="#生成文档相关的注解" class="headerlink" title="生成文档相关的注解"></a>生成文档相关的注解</h2><ul><li><code>@author</code>  标明开发该类模块的作者，多个作者之间使用,分割</li><li><code>@version</code> 标明该类模块的版本</li><li><code>@see</code> 参考转向，也就是相关主题</li><li><code>@since</code> 从哪个版本开始增加的</li><li><code>@param</code> 对方法中某参数的说明，如果没有参数就不能写  <code>(只用于方法)</code>  格式 :  <code>@param 形参名 形参类型 形参说明</code></li><li><code>@return</code> 对方法返回值的说明，如果方法的返回值类型是void就不能写 <code>(只用于方法)</code> 格式 : <code>@return 返回值类型 返回值说明</code></li><li><code>@exception</code> 对方法可能抛出的异常进行说明 ，如果方法没有用throws显式抛出的异常就不能写<code>(只用于方法)</code>  格式 :  <code>@exception 异常类型 异常说明</code> . </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @author shkstart* @version 1.0* @see Math.java*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavadocTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 程序的主方法，程序的入口    * @param args String[] 命令行参数    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 求圆面积的方法    * @param radius double 半径值    * @return double 圆的面积    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="在编译时进行格式检查-JDK内置的三个基本注解"><a href="#在编译时进行格式检查-JDK内置的三个基本注解" class="headerlink" title="在编译时进行格式检查(JDK内置的三个基本注解)"></a>在编译时进行格式检查(JDK内置的三个基本注解)</h2><ul><li><code>@Override</code> : 限定重写父类方法, 该注解只能用于方法</li><li><code>@Deprecated</code>: 用于表示所修饰的元素(类, 方法等)<code>已过时</code>.通常是因为所修饰的结构危险或存在更好的选择</li><li><code>@SuppressWarnings</code> : 抑制编译器警告</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过时的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"重写的toString方法()"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="跟踪代码依赖性，实现替代配置文件功能"><a href="#跟踪代码依赖性，实现替代配置文件功能" class="headerlink" title="跟踪代码依赖性，实现替代配置文件功能"></a>跟踪代码依赖性，实现替代配置文件功能</h2><ul><li><code>Servlet3.0</code>提供了注解(annotation),使得不再需要在<code>web.xml</code>文件中进行<code>Servlet</code>的部署</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.servlet.LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><h2 id="自定义-Annotation"><a href="#自定义-Annotation" class="headerlink" title="自定义 Annotation"></a>自定义 Annotation</h2><ul><li>定义新的 <code>Annotation</code>类型使用 <code>@interface</code>关键字.</li><li>自定义注解自动继承了<code>java.lang.annotation.Annotation</code>接口.</li><li><code>Annotation</code> 的成员变量在 <code>Annotation</code> 定义中以无参数方法的形式来声明.其 方法名和返回值定义了该成员的名字和类型.我们称为配置参数.类型只能是<code>八种基本数据类型</code>、<code>String类型</code>、<code>Class类型</code>、<code>enum类型</code>、<code>Annotation类型</code>、 以上所有类型的数组.</li><li>可以在定义 <code>Annotation</code> 的成员变量时为其指定初始值, 指定成员变量的初始值可使用 <code>default</code> 关键字.</li><li>如果只有一个参数成员，建议使用参数名为<code>value</code>.</li><li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认 值。格式是<code>“参数名 = 参数值”</code> ，如果只有<code>一个参数成员</code>，且名称为<code>value</code>， <code>可以省略“value=”</code></li><li><code>没有成员</code>定义的 <code>Annotation</code> 称为<code>标记</code>; <code>包含成员</code>变量的<code>Annotation</code> 称为<code>元数据Annotation</code></li><li>元数据的理解：String name = “kanseer” <code>修饰数据的数据</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"kanseer0001"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAnnotation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>TestAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Annotation a <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>MyAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyAnnotation m<span class="token operator">=</span><span class="token punctuation">(</span>MyAnnotation<span class="token punctuation">)</span>a<span class="token punctuation">;</span>        String value <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"Kanseer"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="JDK中的元注解"><a href="#JDK中的元注解" class="headerlink" title="JDK中的元注解"></a>JDK中的元注解</h2><ul><li>元注解用来修饰其他注解定义</li><li><code>JDK5.0</code>提供了4个标准的<code>meta-annotation</code>类型<ul><li><code>Retention</code></li><li><code>Target</code></li><li><code>Documented</code></li><li><code>Inherited</code></li></ul></li></ul><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><ul><li>只能用于修饰一个 Annotation 定义, 用于指定该 Annotation 的生命 周期,<code>@Rentention</code> 包含一个 <code>RetentionPolicy</code> 类型的成员变量, 使用 <code>@Rentention</code> 时必须为该 <code>value</code> 成员变量指定值.</li><li><code>RetentionPolicy.SOURCE</code>  : 在源文件中有效(即源文件保留),编译器直接丢弃这种策略的注释.</li><li><code>RetentionPolicy.CLASS</code>  : 在class文件中有效(即class保留),当运行 Java 程序时, JVM不会保留注解,这是默认值.</li><li><code>RetentionPolicy.RUNTIME</code>  : 在运行时有效(即运行时保留),当运行 Java 程序时, JVM 会 保留注释,程序可以通过反射获取该注释.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> RetentionPolicy<span class="token punctuation">{</span>        SOURCE<span class="token punctuation">,</span>        CLASS<span class="token punctuation">,</span>        RUNTIME<span class="token punctuation">}</span></code></pre><h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><ul><li>用于修饰 Annotation 定义, 用于指定被修饰的 Annotation 能用于修饰哪些程序元素, <code>@Target</code> 也包含一个返回值为<code>ElementType</code>类型名为 value 的成员变量.</li><li><code>ElementType.ANNOTATION_TYPE</code>  : 注解类型声明</li><li><code>ElementType.CONSTRUCTOR</code>  : 构造函数声明</li><li><code>ElementType.FIELD</code> : 字段声明(包括枚举常数)</li><li><code>ElementType.LOCAL_VARIABLE</code>  : 局部变量声明</li><li><code>ElementType.METHOD</code> : 方法声明</li><li><code>ElementType.PACKAGE</code> : 包装声明</li><li><code>ElementType.PARAMENTER</code> : 正式参数声明</li><li><code>ElementType.TYPE</code> : 类,接口(包括注解类型),或枚举声明</li><li><code>ElementType.TYPE_PARAMENTER</code> : 键入参数声明</li><li><code>ElementType.TYPE_USER</code> 使用类型声明</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> ElementType <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Class, interface (including annotation type), or enum declaration */</span>    TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Field declaration (includes enum constants) */</span>    FIELD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Method declaration */</span>    METHOD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Formal parameter declaration */</span>    PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Constructor declaration */</span>    CONSTRUCTOR<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Local variable declaration */</span>    LOCAL_VARIABLE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Annotation type declaration */</span>    ANNOTATION_TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** Package declaration */</span>    PACKAGE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Type parameter declaration     *     * @since 1.8     */</span>    TYPE_PARAMETER<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Use of a type     *     * @since 1.8     */</span>    TYPE_USE<span class="token punctuation">}</span></code></pre><h3 id="Documented与-Inherited"><a href="#Documented与-Inherited" class="headerlink" title="@Documented与@Inherited"></a>@Documented与@Inherited</h3><ul><li><code>@Documented</code>  : 用于指定被该元 Annotation 修饰的 Annotation 类将被<code>javadoc</code> 工具提取成文档.默认情况下，javadoc是不包括注解的.</li><li><code>定义为Documented的注解必须设置Retention值为RUNTIME</code></li><li><code>@Inherited</code>  : 被它修饰的 Annotation 将具有<code>继承性</code>.如果某个类使用了被<code>@Inherited</code>修饰的 Annotation, 则其子类将自动具有该注解.</li><li><code>实际应用中，使用较少</code></li></ul><h2 id="利用反射获取注解信息"><a href="#利用反射获取注解信息" class="headerlink" title="利用反射获取注解信息"></a>利用反射获取注解信息</h2><ul><li><code></code>JDK 5.0<code>在</code>java.lang.reflect<code>包下新增了</code>AnnotatedElement 接口<code>, 该接口</code>代表程序中可以接受注解的程序元素`.</li><li><code>当一个 Annotation 类型被定义为运行时 Annotation 后</code>, 该注解才是运行时 可见, 当class文件被载入时保存在 class 文件中的 Annotation 才会被虚拟机读取.</li><li>程序可以调用 <code>AnnotatedElement</code>对象的如下方法来访问 Annotation 信息</li></ul><p><img src="/img/javaannotation/2.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Spring</title>
      <link href="/2020/05/07/Mybatis-Spring/"/>
      <url>/2020/05/07/Mybatis-Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="相关jar"><a href="#相关jar" class="headerlink" title="相关jar"></a>相关jar</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--junit--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mybatis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mysql--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--spring--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--aspectJ AOP--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mybatis-spring--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100200<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="配置SqlSessionFactory"><a href="#配置SqlSessionFactory" class="headerlink" title="配置SqlSessionFactory"></a>配置SqlSessionFactory</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置SqlSessionFactory--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--关联Mybatis--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--关联xml--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/whgc/kang/dao/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="注册sqlSessionTemplate"><a href="#注册sqlSessionTemplate" class="headerlink" title="注册sqlSessionTemplate"></a>注册sqlSessionTemplate</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--注册sqlSessionTemplate , 关联sqlSessionFactory--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--利用构造器注入--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="增加Dao接口的实现类"><a href="#增加Dao接口的实现类" class="headerlink" title="增加Dao接口的实现类"></a>增加Dao接口的实现类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//Spring来管理</span>   <span class="token keyword">private</span> SqlSessionTemplate sqlSession<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSession</span><span class="token punctuation">(</span>SqlSessionTemplate sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="注册bean实现"><a href="#注册bean实现" class="headerlink" title="注册bean实现"></a>注册bean实现</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whgc.kang.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="bean-xml"><a href="#bean-xml" class="headerlink" title="bean.xml"></a>bean.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                        http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/whgc/kang/dao/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whgc.kang.dao.UserMapperImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       UserMapper mapper <span class="token operator">=</span> <span class="token punctuation">(</span>UserMapper<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userMapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       List<span class="token operator">&lt;</span>User<span class="token operator">></span> user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis-Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2020/05/06/Mybatis/"/>
      <url>/2020/05/06/Mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><pre><code>&lt;dependency&gt;   &lt;groupId&gt;org.mybatis&lt;/groupId&gt;   &lt;artifactId&gt;mybatis&lt;/artifactId&gt;   &lt;version&gt;3.5.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;   &lt;groupId&gt;mysql&lt;/groupId&gt;   &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;   &lt;version&gt;5.1.47&lt;/version&gt;&lt;/dependency&gt;</code></pre><h2 id="mybatisUtil"><a href="#mybatisUtil" class="headerlink" title="mybatisUtil"></a>mybatisUtil</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtils</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token punctuation">{</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>           InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>           sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//获取SqlSession连接</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h2><pre class=" language-xml"><code class="language-xml">-properties（属性）    --property-settings（全局配置参数）    --setting-typeAliases（类型别名）    --typeAliase    --package-typeHandlers（类型处理器）-objectFactory（对象工厂）-plugins（插件）-environments（环境集合属性对象）    --environment（环境子属性对象）        ---transactionManager（事务管理）        ---dataSource（数据源）-mappers（映射器）    --mapper    --package<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>        <span class="token doctype">&lt;!DOCTYPE configuration                PUBLIC "-//mybatis.org//DTD Config 3.0//EN"                "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 延迟加载--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kang.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;mapper resource=" "/> 使用相对于类路径的资源--></span>        //此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kang.dao.IAccountDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;package name=""/>        此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><hr><h2 id="mybatis-mapper-xml"><a href="#mybatis-mapper-xml" class="headerlink" title="mybatis-mapper.xml"></a>mybatis-mapper.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--namespace 对应Dao接口位置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kang.dao.IUserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- id对应Dao接口方法名 resultype返回值类型 parameterType参数类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kang.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from t_user where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>saveUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into t_user(id,username,birthday,sex,address)        values(#{id},#{username},#{birthday},#{sex},#{address})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h2 id="mybatis-log4j"><a href="#mybatis-log4j" class="headerlink" title="mybatis-log4j"></a>mybatis-log4j</h2><pre><code># 主要配置log4j.rootLogger=DEBUG,Consolelog4j.appender.Console=org.apache.log4j.ConsoleAppenderlog4j.appender.Console.layout=org.apache.log4j.PatternLayoutlog4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n## log4j.rootLogger ### 作用：控制日志输出的级别、输出的位置。# 参数：级别、输出的位置# 级别： DEBUG &lt; INFO &lt; WARN &lt; ERROR (除了这些，还有其他级别)# 级别作用：以选DEBUG级别为例，大于DEBUG级别的信息（INFO/WARN/ERROR）也会输出# 选用DEBUG级别的原因：是跟Mybatis的源码有关（你会发现最低的级别是DEBUG）。## log4j.appender.Console ### 作用：真正控制，日志输出到什么地方，取决于参数用了什么类# log4j.appender.名称  名称可以自定义，而 log4j.rootLogger中的位置就要写这个名称## log4j.appender.Console.layout ### 作用：以什么布局方式输出日志，这里是自定义的布局## log4j.appender.Console.layout.ConversionPattern ### 作用：就是你自定义的布局# %d 是产生日志的时间。 %t 是产生这个日志所处的线程的名称。# %p 是输出日志的级别，%-5p 5,就是输出5位字符,不足补空格 -,补的空格在右边# %c 是输出的这个日志所在的类的全名。  %m 是你附加的信息。  %n 是换行## log4j.logger.org.apache 对 org.apache ### 作用：的输出级别进行设置（也可以换成其他包）</code></pre><hr><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><blockquote><p>mybatis 一级缓存</p><ul><li>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。<br>mybatis 二级缓存</li><li>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个<br>SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的<br>开启二级缓存</li><li>1.配置mybatis-config.xml</li></ul></blockquote><pre><code>&lt;settings&gt;&lt;!-- 开启二级缓存的支持 --&gt;&lt;setting name="cacheEnabled" value="true"/&gt;&lt;/settings&gt;&lt;!--因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为--&gt;&lt;!--false 代表不开启二级缓存--&gt;</code></pre><ul><li>2.配置相关的 Mapper 映射文件</li></ul><pre><code>&lt;!--&lt;cache&gt;标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值--&gt;&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.test.dao.IUserDao"&gt;    &lt;!-- 开启二级缓存的支持 --&gt;    &lt;cache&gt;&lt;/cache&gt;&lt;/mapper&gt;</code></pre><ul><li>3.配置 statement 上面的 useCache 属性</li></ul><pre><code>&lt;!-- 根据 id 查询 --&gt;&lt;select id="findById" resultType="user" parameterType="int" useCache="true"&gt;    select * from user where id = #{uid}&lt;/select&gt;&lt;!--将 UserDao.xml 映射文件中的&lt;select&gt;标签中设置 useCache=”true”代表当前这个 statement 要使用二级缓存，如果不使用二级缓存可以设置为 false--&gt;</code></pre><blockquote><p>mybatis注解开发</p><ul><li>常用注解<pre><code>@Insert:实现新增@Update:实现更新@Delete:实现删除@Select:实现查询@Result:实现结果集封装@Results:可以与@Result 一起使用，封装多个结果集@ResultMap:实现引用@Results 定义的封装@One:实现一对一结果集封装@Many:实现一对多结果集封装@SelectProvider: 实现动态 SQL 映射@CacheNamespace:实现注解二级缓存的使用</code></pre></li></ul></blockquote><h2 id="静态资源过滤"><a href="#静态资源过滤" class="headerlink" title="静态资源过滤"></a>静态资源过滤</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaClass</title>
      <link href="/2020/04/24/Javaclass/"/>
      <url>/2020/04/24/Javaclass/</url>
      
        <content type="html"><![CDATA[<h1 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>String是一个<code>final类</code>，代表不可变的字符序列</li><li>字符串是常量，用双引号引起来表示.它们的值在创建之后不能更改</li><li>String对象的字符内容是存储在一个字符数组<code>value[]</code>中的</li></ul><p><img src="/img/javaclass/1.png" alt=""></p><ul><li>字符串常量存储在 字符串常量池，目的是共享</li><li>字符串非常量对象 存储在堆中</li><li>常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量</li><li>只要其中有一个是变量，结果就在堆中</li><li>如果拼接的结果调用<code>intern()方法</code>，返回值就在常量池中</li></ul><p><img src="/img/javaclass/2.png" alt=""></p><h2 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h2><ul><li><code>int length()</code>：返回字符串的长度</li><li><code>char charAt(int index)</code>：返回某索引处的字符</li><li><code>boolean isEmpty()</code>：判断是否是空字符串</li><li><code>String toLowerCase()</code>：使用默认语言环境，将 String 中的所有字符转换为小写</li><li><code>String toUpperCase()</code>：使用默认语言环境，将 String 中的所有字符转换为大写</li><li><code>String trim()</code>：返回字符串的副本，忽略前导空白和尾部空白</li><li><code>boolean equals(Object obj)</code>：比较字符串的内容是否相同</li><li><code>boolean equalsIgnoreCase(String anotherString)</code>：与equals方法类似，忽略大 小写</li><li><code>String concat(String str)</code>：将指定字符串连接到此字符串的结尾。 等价于用“+”</li><li><code>int compareTo(String anotherString)</code>：比较两个字符串的大小</li><li><code>String substring(int beginIndex)</code>：返回一个新的字符串，它是此字符串的从 beginIndex开始截取到最后的一个子字符串</li><li><code>String substring(int beginIndex, int endIndex)</code> ：返回一个新字符串，它是此字 符串从beginIndex开始截取到endIndex(不包含)的一个子字符串</li><li><code>boolean endsWith(String suffix)</code>：测试此字符串是否以指定的后缀结束</li><li><code>boolean startsWith(String prefix)</code>：测试此字符串是否以指定的前缀开始</li><li><code>boolean startsWith(String prefix, int toffset)</code>：测试此字符串从指定索引开始的 子字符串是否以指定前缀开始</li><li><code>boolean contains(CharSequence s)</code>：<code>charSequence是接口</code>，表示char值的一个可读序列</li><li><code>int indexOf(String str)</code>：返回指定子字符串在此字符串中第一次出现处的索引</li><li><code>int indexOf(String str, int fromIndex)</code>：返回指定子字符串在此字符串中第一次出 现处的索引，从指定的索引开始</li><li><code>int lastIndexOf(String str)</code>：返回指定子字符串在此字符串中最右边出现处的索引</li><li><code>int lastIndexOf(String str, int fromIndex)</code>：返回指定子字符串在此字符串中最后 一次出现处的索引，从指定的索引开始反向搜索</li><li><code>String replace(char oldChar, char newChar)</code> : 在字符串中用newChar字符替代oldChar字符，返回一个新的字符串</li><li><code>String replaceAll(String regex,String replacement)</code> : 使用给定的 replacement 字符串替换此字符串匹配给定的正则表达式的每个子字符串</li><li><code>boolean matches(String regex)</code> : 方法用于检测字符串是否匹配给定的正则表达式</li><li><code>String[] split(String regex, int limit)</code> : 根据匹配给定的正则表达式来拆分字符串</li><li><strong>字符串 -&gt; 基本数据类型、包装类</strong><ul><li>Integer包装类的<code>public static int parseInt(String s)</code>：可以将由“数字”字 符组成的字符串转换为整型</li><li>使用java.lang包中的Byte、Short、Long、Float、Double类调相应 的类方法可以将由“数字”字符组成的字符串，转化为相应的基本数据类型</li></ul></li><li><strong>基本数据类型、包装类 -&gt; 字符串</strong><ul><li>调用String类的<code>public String valueOf(int n)</code>可将int型转换为字符串</li><li>相应的<code>valueOf(byte b)、valueOf(long l)、valueOf(float f)、valueOf(double d)、valueOf(boolean b)</code>可由参数的相应类型到字符串的转换</li></ul></li><li><strong>字符数组 -&gt; 字符串</strong><ul><li>String 类的构造器：<code>String(char[])</code> 和 <code>String(char[]，int offset，int length)</code> 分别用字符数组中的全部字符和部分字符创建字符串对象</li></ul></li><li><strong>字符串 -&gt; 字符数组</strong><ul><li><code>public char[] toCharArray()</code>：将字符串中的全部字符存放在一个字符数组 中的方法</li><li><code>public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</code>：提供了将指定索引范围内的字符串存放到数组中的方法</li></ul></li><li><strong>字节数组 -&gt; 字符串</strong><ul><li><code>String(byte[])</code>：通过使用平台的默认字符集解码指定的 byte 数组，构 造一个新的 String</li><li><code>String(byte[]，int offset，int length)</code> ：用指定的字节数组的一部分， 即从数组起始位置offset开始取length个字节构造一个字符串对象</li></ul></li><li><strong>字符串 -&gt; 字节数组</strong><ul><li><code>public byte[] getBytes()</code> ：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中</li><li><code>public byte[] getBytes(String charsetName)</code> ：使用指定的字符集将 此 String 编码到 byte 序列，并将结果存储到新的 byte 数组</li></ul></li></ul><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><ul><li><code>java.lang.StringBuffer</code>代表可变的字符序列，<code>JDK1.0</code>中声明，可以对字符 串内容进行增删，此时不会产生新的对象</li><li>作为参数传递时，方法内部可以改变值</li></ul><p><img src="/img/javaclass/3.png" alt=""></p><ul><li><code>StringBuffer</code>类不同于String，其对象必须使用构造器生成<ul><li><code>StringBuffer()</code>：初始容量为16的字符串缓冲区</li><li><code>StringBuffer(int size)</code>：构造指定容量的字符串缓冲区</li><li><code>StringBuffer(String str)</code>：将内容初始化为指定字符串内容</li></ul></li><li><code>StringBuffer</code>是线程安全的,所有方法都有<code>synchronized</code></li></ul><h2 id="StringBuffer常用方法"><a href="#StringBuffer常用方法" class="headerlink" title="StringBuffer常用方法"></a>StringBuffer常用方法</h2><ul><li><code>StringBuffer append(xxx)</code>：提供了很多的append()方法，用于进行字符串拼接</li><li><code>StringBuffer delete(int start,int end)</code>：删除指定位置的内容</li><li><code>StringBuffer replace(int start, int end, String str)</code>：把[start,end)位置替换为str</li><li><code>StringBuffer insert(int offset, xxx)</code>：在指定位置插入xxx , 长度不够,可扩容</li></ul><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><ul><li><code>StringBuilder</code> 和 <code>StringBuffer</code> 非常类似，均代表可变的字符序列，而且 提供相关功能的方法也一样</li><li><code>StringBuilder(JDK 5.0)</code>：可变字符序列、<code>效率高、线程不安全</code></li><li><code>StringBuffer(JDK1.0)</code>：可变字符序列、<code>效率低、线程安全</code></li><li><code>String(JDK1.0)</code>：不可变字符序列</li></ul><h2 id="java-lang-System"><a href="#java-lang-System" class="headerlink" title="java.lang.System"></a>java.lang.System</h2><ul><li>系统的很多属性和控制方法都放置在该类的内部</li><li>System类内部包含<code>in</code>、<code>out</code>和<code>err</code>三个成员变量，分别代表标准输入流 (键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)</li><li><code>public static long currentTimeMillis()</code> :  用来返回当前时 间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差</li><li><code>void exit(int status)</code>：该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表 异常退出</li><li><code>void gc()</code>：该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则 取决于系统中垃圾回收算法的实现以及系统执行时的情况</li><li><code>String getProperty(String key)</code>：该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见 的属性名以及属性的作用如下表所示</li></ul><p><img src="/img/javaclass/4.png" alt=""></p><h2 id="java-util-Date"><a href="#java-util-Date" class="headerlink" title="java.util.Date"></a>java.util.Date</h2><ul><li>表示特定的瞬间，精确到毫秒</li><li><code>Date()</code>：使用无参构造器创建的对象可以获取本地当前时间</li><li><code>Date(long date)</code></li><li><code>getTime(</code>):返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象 表示的毫秒数</li><li><code>toString()</code>:把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)，zzz是时间标准</li></ul><h2 id="java-text-SimpleDateFormat"><a href="#java-text-SimpleDateFormat" class="headerlink" title="java.text.SimpleDateFormat"></a>java.text.SimpleDateFormat</h2><ul><li><strong>格式化</strong><ul><li><code>SimpleDateFormat()</code> ：默认的模式和语言环境创建对象</li><li><code>public SimpleDateFormat(String pattern)</code>：该构造方法可以用参数pattern 指定的格式创建一个对象，该对象调用：</li><li><code>public String format(Date date)</code>：方法格式化时间对象date</li></ul></li><li><strong>解析</strong><ul><li><code>public Date parse(String source)</code>：从给定字符串的开始解析文本，以生成 一个日期</li></ul></li></ul><p><img src="/img/javaclass/5.png" alt=""></p><h2 id="java-util-Calender"><a href="#java-util-Calender" class="headerlink" title="java.util.Calender"></a>java.util.Calender</h2><ul><li><code>Calendar是一个抽象基类</code>，主用用于完成日期字段之间相互操作的功能</li><li>获取Calendar实例的方法<ul><li>使用<code>Calendar.getInstance()</code>方法</li><li>调用它的<code>子类GregorianCalendar</code>的构造器</li></ul></li><li>一个Calendar的实例是系统时间的抽象表示，通过<code>get(int field)</code>方法来取得想 要的时间信息。比如YEAR、MONTH、DAY_OF_WEEK、HOUR_OF_DAY 、 MINUTE、SECOND<ul><li><code>public void set(int field,int value)</code></li><li><code>public void add(int field,int amount)</code></li><li><code>public final Date getTime()</code></li><li><code>public final void setTime(Date date)</code></li></ul></li></ul><h2 id="java-time-Java-8"><a href="#java-time-Java-8" class="headerlink" title="java.time(Java 8)"></a>java.time(Java 8)</h2><ul><li>中包含了所有关于本地日期（<code>LocalDate</code>）、本地时间 （<code>LocalTime</code>）、本地日期时间（<code>LocalDateTime</code>）、时区（<code>ZonedDateTime</code>） 和持续时间（<code>Duration</code>）的类</li></ul><p><img src="/img/javaclass/6.png" alt=""></p><ul><li><code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code> 类是其中较重要的几个类，它们的实例是<code>不可变的对象</code>，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间<ul><li><code>LocalDate</code>代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期</li><li><code>LocalTime</code>表示一个时间，而不是日期</li><li><code>LocalDateTime</code>是用来表示日期和时间的，这是一个最常用的类之一</li></ul></li></ul><p><img src="/img/javaclass/7.png" alt=""></p><ul><li><strong>瞬时(Instant)</strong><ul><li><code>Instant</code>：时间线上的一个瞬时点. 这可能被用来记录应用程序中的事件时间戳</li><li><code>java.time</code>包通过值类型Instant提供机器视图，不提供处理人类意义上的时间单位</li></ul></li></ul><p><img src="/img/javaclass/8.png" alt=""></p><ul><li><strong>格式化与解析</strong><ul><li><code>java.time.format.DateTimeFormatter 类</code>：该类提供了三种格式化方法</li><li><code>ISO_LOCAL_DATE_TIME</code>;<code>ISO_LOCAL_DATE</code>;<code>ISO_LOCAL_TIME</code></li><li><code>ofLocalizedDateTime(FormatStyle.LONG)</code> : 本地化相关的格式</li><li><code>ofPattern(“yyyy-MM-dd hh:mm:ss”)</code> : 自定义的格式</li></ul></li></ul><p><img src="/img/javaclass/9.png" alt=""></p><ul><li><strong>其他API</strong><ul><li><code>ZoneId</code>：该类中包含了所有的时区信息，一个时区的ID，如 Europe/Paris</li><li><code>ZonedDateTime</code>：一个在ISO-8601日历系统时区的日期时间，如 2007-12- 03T10:15:30+01:00 Europe/Paris</li><li><code>Clock</code>：使用时区提供对当前即时、日期和时间的访问的时钟</li><li><code>Duration</code> : 用于计算两个“时间”间隔</li><li><code>Period</code> : 用于计算两个“日期”间隔</li><li><code>TemporalAdjuster</code> : 时间校正器。有时我们可能需要获取例如：将日期调整 到“下一个工作日”等操作</li><li><code>TemporalAdjusters</code> : 该类通过静态方法 <code>(firstDayOfXxx()/lastDayOfXxx()/nextXxx())</code>提供了大量的常用 TemporalAdjuster 的实现</li></ul></li></ul><p><img src="/img/javaclass/10.png" alt=""></p><h2 id="java-lang-Comparable"><a href="#java-lang-Comparable" class="headerlink" title="java.lang.Comparable"></a>java.lang.Comparable</h2><ul><li><code>Comparable接口</code>强行对实现它的每个类的对象进行整体排序.这种排序被称 为类的自然排序</li><li>实现 Comparable 的类必须实现 <code>compareTo(Object obj)</code> 方法，两个对象即 通过 compareTo(Object obj) 方法的返回值来比较大小</li><li>实现Comparable接口的对象列表（和数组）可以通过 <code>Collections.sort</code> 或 <code>Arrays.sort</code>进行自动排序.实现此接口的对象可以用作有序映射中的键或有 序集合中的元素，无需指定比较器</li><li>对于类 C 的每一个 e1 和 e2 来说，当且仅当 <code>e1.compareTo(e2) == 0</code> 与 <code>e1.equals(e2)</code> 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals 一致。建议（虽然不是必需的）最好使自然排序与 equals 一致</li><li><code>Comparable</code> 的典型实现：(默认都是从小到大排列的)<ul><li><code>String</code>：按照字符串中字符的Unicode值进行比较</li><li><code>Character</code>：按照字符的Unicode值来进行比较</li><li>数值类型对应的包装类以及<code>BigInteger</code>、<code>BigDecimal</code>：按照它们对应的数值 大小进行比较</li><li><code>Boolean</code>：true 对应的包装类实例大于 false 对应的包装类实例</li><li><code>Date</code>、<code>Time</code>等：后面的日期时间比前面的日期时间大</li></ul></li></ul><h2 id="java-util-Comparator"><a href="#java-util-Comparator" class="headerlink" title="java.util.Comparator"></a>java.util.Comparator</h2><ul><li>当元素的类型没有实现<code>java.lang.Comparable接口</code>而又不方便修改代码， 或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那 么可以考虑使用 <code>Comparator 的对象</code>来排序，强行对多个对象进行整体排 序的比较</li><li>重写<code>compare(Object o1,Object o2)方法</code>，比较o1和o2的大小：如果方法返 回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示 o1小于o2</li><li>可以将 Comparator 传递给 sort 方法（如 <code>Collections.sort</code> 或 <code>Arrays.sort</code>）， 从而允许在排序顺序上实现精确控制</li><li>还可以使用 Comparator 来控制某些数据结构（如有序 set或有序映射）的 顺序，或者为那些没有自然顺序的对象 collection 提供排序</li></ul><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><ul><li><code>java.lang.Math</code>提供了一系列静态方法用于科学计算。其方法的参数和返回 值类型一般为double型</li></ul><p><img src="/img/javaclass/11.png" alt=""></p><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><ul><li><code>Integer</code>类作为int的包装类，能存储的最大整型值为<code>2^31 - 1</code>，Long类也是有限的， 最大为<code>2^63 - 1</code></li><li><code>java.math</code>包的<code>BigInteger</code>可以表示不可变的任意精度的整数。BigInteger 提供 所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。 另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、 位操作以及一些其他操作</li><li><code>BigInteger(String val)</code>：根据字符串构建BigInteger对象</li></ul><p><img src="/img/javaclass/12.png" alt=""></p><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><ul><li>一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中， 要求数字精度比较高，故用到<code>java.math.BigDecimal</code>类</li><li><code>BigDecimal</code>类支持不可变的、任意精度的有符号十进制定点数</li><li>构造器<ul><li><code>public BigDecimal(double val)</code></li><li><code>public BigDecimal(String val)</code></li></ul></li><li>常用方法<ul><li><code>public BigDecimal add(BigDecimal augend)</code></li><li><code>public BigDecimal subtract(BigDecimal subtrahend)</code></li><li><code>public BigDecimal multiply(BigDecimal multiplicand)</code></li><li><code>public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</code></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaThread</title>
      <link href="/2020/04/23/JavaThread/"/>
      <url>/2020/04/23/JavaThread/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-多线程"><a href="#Java-多线程" class="headerlink" title="Java 多线程"></a>Java 多线程</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><strong>程序</strong><ul><li>是为完成特定任务、用某种语言编写的一组指令的集合。即指一 段<code>静态</code>的代码，静态对象</li></ul></li><li><strong>进程</strong><ul><li>是程序的一次执行过程，或是正在运行的一个程序。是一个<code>动态</code>的过程：有它自身的<code>产生</code>、<code>存在</code>和<code>消亡的过程</code>.——生命周期</li></ul></li><li><strong>线程</strong><ul><li>进程可进一步细化为线程，是一个程序内部的一条执行路径</li></ul></li><li><strong>单核与多核</strong><ul><li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程 的任务</li><li>如果是多核的话，才能更好的发挥多线程的效率</li><li>一个Java应用程序java.exe，其实至少有三个线程：<code>main()</code>主线程，<code>gc()</code> 垃圾回收线程，<code>异常处理</code>线程.当然如果发生异常，会影响主线程</li></ul></li><li><strong>并行与并发</strong><ul><li><strong>并行</strong>:<code>多个</code>CPU同时执行<code>多个</code>任务</li><li><strong>并发</strong>:<code>一个</code>CPU(采用时间片)<code>同时执行多个</code>任务</li></ul></li><li><strong>使用多线程的优点</strong><ul><li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验</li><li>提高计算机系统CPU的利用率</li><li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</li></ul></li><li><strong>何时需要多线程</strong><ul><li>程序需要同时执行两个或多个任务</li><li>程序需要实现一些需要等待的任务时，如用户输入、文件读写 操作、网络操作、搜索等</li><li>需要一些后台运行的程序时</li></ul></li></ul><hr><h2 id="线程的创建和使用"><a href="#线程的创建和使用" class="headerlink" title="线程的创建和使用"></a>线程的创建和使用</h2><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><ul><li><code>Thread()</code>：创建新的Thread对象</li><li><code>Thread(String threadname)</code>：创建线程并指定线程实例名</li><li><code>Thread(Runnable target)</code>：指定创建线程的目标对象，它实现了Runnable接 口中的run方法</li><li><code>Thread(Runnable target, String name)</code>：创建新的Thread对象</li><li><strong>特性</strong><ul><li>每个线程都是通过某个特定<code>Thread</code>对象的<code>run()</code>方法来完成操作的，经常 把run()方法的主体称为<code>线程体</code></li><li>通过该<code>Thread</code>对象的<code>start()</code>方法来启动这个线程，而非直接调用run()</li></ul></li><li><strong>创建线程方式</strong>(JDK1.5之前)<ul><li>继承<code>Thread类</code>的方式</li><li>实现<code>Runnable接口</code>的方式</li></ul></li><li><strong>区别</strong><ul><li><code>继承Thread</code>：线程代码存放Thread子类run方法中</li><li><code>实现Runnable</code>：线程代码存在接口的子类的run方法</li></ul></li><li><strong>实现好处</strong><ul><li>避免了单继承的局限性</li><li>多个线程可以共享同一个接口实现类的对象，非常适合多个相同线 程来处理同一份资源</li></ul></li><li><strong>Thread类方法</strong><ul><li><code>start()</code> :启动线程，并执行对象的run()方法</li><li><code>run()</code> :线程在被调度时执行的操作</li><li><code>String getName()</code> : 返回线程的名称</li><li><code>setName(String name)</code> :设置该线程名称</li><li><code>static Thread currentThread()</code> : 返回当前线程<ul><li>在Thread子类中就 是this，通常用于主线程和Runnable实现类</li></ul></li><li><code>static void yield()</code>：线程让步<ul><li>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</li><li>若队列中没有同优先级的线程，忽略此方法</li></ul></li><li><code>join()</code> : 当某个程序执行流中调用其他线程的 join() 方法时，调用线程将 被阻塞，直到 join() 方法加入的 join 线程执行完为止<ul><li>低优先级的线程也可以获得执行</li></ul></li><li><code>static void sleep(long millis)</code>: (指定时间:毫秒)<ul><li>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后 重排队</li><li>抛出<code>InterruptedException</code>异常</li></ul></li><li><code>stop()</code> : 强制线程生命期结束，不推荐使用</li><li><code>boolean isAlive()</code> : 返回boolean，判断线程是否还活着</li></ul></li></ul><hr><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><ul><li><strong>调度策略</strong><ul><li>时间片</li><li>抢占式：高优先级的线程抢占CPU</li></ul></li><li><strong>调度方法</strong><ul><li>同优先级线程组成先进先出队列（先到先服务），使用时间片策略</li><li>对高优先级，使用优先调度的抢占式策略</li></ul></li><li><strong>线程的优先级等级</strong><ul><li><code>MAX_PRIORITY</code>：10 </li><li><code>MIN _PRIORITY</code>：1 </li><li><code>NORM_PRIORITY</code>：5 </li></ul></li><li><strong>方法</strong><ul><li><code>getPriority()</code> ：返回线程优先值</li><li><code>setPriority(int newPriority)</code> ：改变线程的优先级</li></ul></li><li><strong>说明</strong><ul><li>线程创建时继承父线程的优先级</li><li>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</li></ul></li><li><strong>线程分类</strong><ul><li>一种是守护线程，一种是用户线程</li><li>它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开</li><li>守护线程是用来服务用户线程的，通过在start()方法前调用 <code>thread.setDaemon(true)</code>可以把一个用户线程变成一个守护线程</li><li>Java垃圾回收就是一个典型的守护线程</li><li>若JVM中都是守护线程，当前JVM将退出</li><li>形象理解：<code>兔死狗烹，鸟尽弓藏</code></li></ul></li></ul><hr><h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><ul><li><code>Thread.State类</code>定义了线程的几种状态</li><li><code>新建</code>：当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li><li><code>就绪</code>：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源</li><li><code>运行</code>: 当就绪的线程被调度并获得CPU资源时,便进入运行状态， run()方法定义了线程的操作和功能</li><li><code>阻塞</code> : 在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态</li><li><code>死亡</code>: 线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li></ul><p><img src="/img/javathread/1.png" alt=""></p><p><img src="/img/javathread/2.png" alt=""></p><hr><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><ul><li><strong>问题的提出</strong><ul><li>多个线程执行的不确定性引起执行结果的不稳定</li><li>多个线程对账本的共享，会造成操作的不完整性，会破坏数据</li></ul></li></ul><p><img src="/img/javathread/3.png" alt=""></p><ul><li><p><strong>同步机制</strong></p><ul><li>同步代码块</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要被同步的代码;</span><span class="token punctuation">}</span></code></pre><ul><li>同步方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>锁</strong></p><ul><li>同步锁机制 : 对于并发工作，你需要某种方式来防 止两个任务访问相同的资源（其实就是共享资源竞争）。 防止这种冲突的方法 就是当资源被一个任务使用时，在其上加锁。第一个访问某项资源的任务必须锁定这项资源，使其他任务在其被解锁之前，就无法访问它了，而在其被解锁之时，另一个任务就可以锁定并使用它了</li><li>synchronized的锁<ul><li>任意对象都可以作为同步锁。所有对象都自动含有单一的锁（监视器）</li><li>同步方法的锁：静态方法（类名.class）、非静态方法（this）</li><li>同步代码块：自己指定，很多时候也是指定为this或类名.class</li></ul></li><li>注意<ul><li>必须确保使用同一个资源的多个线程共用一把锁，这个非常重要，否则就 无法保证共享资源的安全</li><li>一个线程类中的所有静态方法共用同一把锁（类名.class），所有非静态方 法共用同一把锁（this），同步代码块（指定需谨慎）</li></ul></li></ul></li><li><p><strong>释放锁的操作</strong></p><ul><li>当前线程的同步方法、同步代码块执行结束</li><li>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、 该方法的继续执行</li><li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导 致异常结束</li><li>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线 程暂停，并释放锁</li></ul></li><li><p><strong>不会释放锁的操作</strong></p><ul><li>线程执行同步代码块或同步方法时，程序调用<code>Thread.sleep()</code>、 <code>Thread.yield()</code>方法暂停当前线程的执行</li><li>线程执行同步代码块时，其他线程调用了该线程的<code>suspend()</code>方法将该线程 挂起，该线程不会释放锁（同步监视器）</li></ul></li><li><p><strong>单例设计模式之懒汉式</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>               <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong>线程死锁</strong><ul><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃 自己需要的同步资源，就形成了线程的死锁</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于 阻塞状态，无法继续</li><li>解决方法<ul><li>专门的算法、原则</li><li>尽量减少同步资源的定义</li><li>尽量避免嵌套同步</li></ul></li></ul></li></ul><h3 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock(锁)"></a>Lock(锁)</h3><ul><li>从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同 步锁对象来实现同步。同步锁使用Lock对象充当</li><li><code>java.util.concurrent.locks.Lock</code>接口是控制多个线程对共享资源进行访问的 工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象 加锁，线程开始访问共享资源之前应先获得Lock对象</li><li><code>ReentrantLock 类</code>实现了 Lock ，它拥有与 synchronized 相同的并发性和 内存语义，在实现线程安全的控制中，比较常用的是<code>ReentrantLock</code>，可以 显式加锁、释放锁</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RennTrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> m<span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//保证线程安全的代码;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong>synchronized 与 Lock 的对比</strong><ul><li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是 隐式锁，出了作用域自动释放</li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有 更好的扩展性（提供更多的子类）</li></ul></li></ul><hr><h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><ul><li><code>wait() 与 notify() 和 notifyAll()</code><ul><li><code>wait()</code>：令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当 前线程排队等候其他线程调用<code>notify()</code>或<code>notifyAll()</code>方法唤醒，唤醒后等待重新获得对监视器的所有 权后才能继续执行</li><li><code>notify()</code>：唤醒正在排队等待同步资源的线程中优先级最高者结束等待</li><li><code>notifyAll ()</code>：唤醒正在排队等待资源的所有线程结束等待</li></ul></li><li>这三个方法只有在<code>synchronized方法</code>或<code>synchronized代码块</code>中才能使用，否则会报 <code>java.lang.IllegalMonitorStateException</code>异常</li><li>因为这三个方法必须有锁对象调用，而任意对象都可以作为synchronized的同步锁， 因此这三个方法只能在Object类中声明</li><li><strong>经典问题：生产者/消费者问题</strong></li></ul><hr><h3 id="JDK5-0新增线程创建方式"><a href="#JDK5-0新增线程创建方式" class="headerlink" title="JDK5.0新增线程创建方式"></a>JDK5.0新增线程创建方式</h3><ul><li><strong>实现Callable接口</strong><ul><li>相比run()方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类，比如获取返回结果</li></ul></li><li><strong>Future接口</strong><ul><li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是 否完成、获取结果等</li><li>FutrueTask是Futrue接口的唯一的实现类</li><li>FutureTask 同时实现了Runnable, Future接口。它既可以作为 Runnable被线程执行，又可以作为Future得到Callable的返回值</li></ul></li><li><strong>线程池</strong><ul><li><code>背景</code>：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程， 对性能影响很大</li><li><code>思路</code>：提前创建好多个线程，放入线程池中，使用时直接获取，使用完 放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交 通工具</li><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理<ul><li><code>corePoolSize</code>：核心池的大小</li><li><code>maximumPoolSize</code>：最大线程数</li><li><code>keepAliveTime</code>：线程没有任务时最多保持多长时间后会终止</li></ul></li></ul></li><li><strong>线程池API</strong><ul><li><code>ExecutorService</code>：真正的线程池接口。常见子类<code>ThreadPoolExecutor</code><ul><li><code>void execute(Runnable command)</code> ：执行任务/命令，没有返回值，一般用来执行 Runnable</li><li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code>：执行任务，有返回值，一般又来执行 Callable</li><li><code>void shutdown()</code> : 关闭连接池</li></ul></li><li><code>Executors</code>：工具类、线程池的工厂类，用于创建并返回不同类型的线程池<ul><li><code>Executors.newCachedThreadPool()</code>：创建一个可根据需要创建新线程的线程池</li><li><code>Executors.newFixedThreadPool(n)</code> : 创建一个可重用固定线程数的线程池</li><li><code>Executors.newSingleThreadExecutor()</code> : 创建一个只有一个线程的线程池</li><li><code>Executors.newScheduledThreadPool(n)</code> : 创建一个线程池，它可安排在给定延迟后运 行命令或者定期地执行</li></ul></li></ul></li></ul><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash</title>
      <link href="/2020/04/15/Bash/"/>
      <url>/2020/04/15/Bash/</url>
      
        <content type="html"><![CDATA[<h2 id="运行Bash脚本"><a href="#运行Bash脚本" class="headerlink" title="运行Bash脚本"></a>运行Bash脚本</h2><pre class=" language-Bash"><code class="language-Bash"># 使用shell来执行$ sh hello.sh# 使用bash来执行$ bash hello.sh#使用.来执行$ . ./hello.sh#使用source来执行$ source hello.sh#还可以赋予脚本所有者执行权限，允许该用户执行该脚本$ chmod u+rx hello.sh$  ./hello.sh</code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre class=" language-Bash"><code class="language-Bash">#!/bin/bashecho "The # here does not begin a comment."echo 'The # here does not begin a comment.'echo The \# here does not begin a comment.echo The # 这里开始一个注释echo $(( 2#101011 ))     # 数制转换（使用二进制表示），不是一个注释，双括号表示对于数字的处理</code></pre><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><ul><li>使用分号（;）可以在同一行上写两个或两个以上的命令</li></ul><pre class=" language-Bash"><code class="language-Bash"> #!/bin/bash echo hello; echo there filename=ttt.sh if [ -e "$filename" ]; then    # 注意: "if"和"then"需要分隔，-e用于判断文件是否存在     echo "File $filename exists."; cp $filename $filename.bak else     echo "File $filename not found."; touch $filename fi; echo "File test complete."</code></pre><ul><li>终止case选项(双分号)</li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/bashvarname=bcase "$varname" in    [a-z]) echo "abc";;    [0-9]) echo "123";;esac</code></pre><h2 id="点号"><a href="#点号" class="headerlink" title="点号(.)"></a>点号(.)</h2><ul><li>等价于source命令 在当前 bash 环境下读取并执行 FileName.sh 中的命令</li></ul><pre class=" language-Bash"><code class="language-Bash">$ source test.shHello World$ . test.shHello World</code></pre><h2 id="双引号-“"><a href="#双引号-“" class="headerlink" title="双引号(“)"></a>双引号(“)</h2><ul><li>会阻止（解释）STRING中大部分特殊的字符</li></ul><h2 id="单引号-‘"><a href="#单引号-‘" class="headerlink" title="单引号(‘)"></a>单引号(‘)</h2><ul><li>将会阻止STRING中所有特殊字符的解释,这是一种比使用”更强烈的形式</li></ul><h2 id="斜线"><a href="#斜线" class="headerlink" title="斜线(/)"></a>斜线(/)</h2><ul><li>文件名路径分隔符</li></ul><h2 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线(\)"></a>反斜线(\)</h2><ul><li>转移字符</li></ul><h2 id="反引号"><a href="#反引号" class="headerlink" title="反引号(`)"></a>反引号(`)</h2><ul><li>反引号中的命令会优先执行</li></ul><pre class=" language-Bash"><code class="language-Bash">$ cp `mkdir back` test.sh back</code></pre><h2 id="冒号"><a href="#冒号" class="headerlink" title="冒号(:)"></a>冒号(:)</h2><ul><li>等价于”NOP” (no op) 也可以被认为与shell的内建命令true作用相同</li><li>与&gt;重定向操作符结合会清空文件,不存在就创建</li><li>与&gt;&gt;不会对预先存在的目标文件产生影响,不存在就创建</li><li>也可能用来作为注释行</li><li>还用来在 /etc/passwd 和 $PATH 变量中做分隔符</li></ul><pre class=" language-Bash"><code class="language-Bash">$ echo $PATH/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/sbin:/usr/sbin:/usr/games</code></pre><h2 id="问号"><a href="#问号" class="headerlink" title="问号(?)"></a>问号(?)</h2><ul><li>在一个双括号结构中，? 就是C语言的三元操作符</li></ul><h2 id="美元"><a href="#美元" class="headerlink" title="美元($)"></a>美元($)</h2><ul><li>变量替换</li></ul><h2 id="小括号"><a href="#小括号" class="headerlink" title="小括号(())"></a>小括号(())</h2><ul><li>命令组 在括号中的命令列表，将会作为一个子 shell 来运行</li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/basha=123( a=321; )echo "$a" #a的值为123而不是321，因为括号将判断为局部变量</code></pre><ul><li>初始化数组</li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/basharr=(1 4 5 7 9 21)echo ${arr[3]} # get a value of arr</code></pre><h2 id="大括号"><a href="#大括号" class="headerlink" title="大括号({})"></a>大括号({})</h2><ul><li>文件名扩展 复制 t.txt 的内容到 t.back 中</li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/bashif [ ! -w 't.txt' ];then    touch t.txtfiecho 'test text' >> t.txtcp t.{txt,back}</code></pre><ul><li>代码块(内部组，这个结构事实上创建了一个匿名函数)然而，与“标准”函数不同的是,在其中声明的变量，对于脚本其他部分的代码来说还是可见的</li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/basha=123{ a=321; }echo "a = $a" # a=321</code></pre><h2 id="中括号"><a href="#中括号" class="headerlink" title="中括号([])"></a>中括号([])</h2><ul><li>条件测试 (双中括号([[ ]])也用作条件测试(判断))</li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/basha=5if [ $a -lt 10 ]then    echo "a: $a"else    echo 'a>=10'fi</code></pre><ul><li>数组元素</li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/basharr=(12 22 32)arr[0]=10echo ${arr[0]} #10</code></pre><h2 id="尖括号-lt-gt"><a href="#尖括号-lt-gt" class="headerlink" title="尖括号(<>)"></a>尖括号(&lt;&gt;)</h2><ul><li>test.sh &gt; filename：重定向test.sh的输出到文件 filename 中。如果 filename 存在的话，那么将会被覆盖</li><li>test.sh &amp;&gt; filename：重定向 test.sh 的 stdout（标准输出）和 stderr（标准错误）到 filename 中</li><li>test.sh &gt;&amp;2：重定向 test.sh 的 stdout 到 stderr 中</li><li>test.sh &gt;&gt; filename：把 test.sh 的输出追加到文件 filename 中。如果filename 不存在的话，将会被创建</li></ul><h2 id="竖线"><a href="#竖线" class="headerlink" title="竖线(|)"></a>竖线(|)</h2><ul><li>管道 分析前边命令的输出，并将输出作为后边命令的输入</li></ul><h2 id="破折号"><a href="#破折号" class="headerlink" title="破折号(-)"></a>破折号(-)</h2><ul><li>选项,前缀</li><li>用于重定向stdio或stdout</li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/bash#下面脚本用于备份最后24小时当前目录下所有修改的文件.BACKUPFILE=backup-$(date +%m-%d-%Y)# 在备份文件中嵌入时间.archive=${1:-$BACKUPFILE}#  如果在命令行中没有指定备份文件的文件名,#  那么将默认使用"backup-MM-DD-YYYY.tar.gz".tar cvf - `find . -mtime -1 -type f -print` > $archive.targzip $archive.tarecho "Directory $PWD backed up in archive file \"$archive.tar.gz\"."exit 0</code></pre><h2 id="波浪号"><a href="#波浪号" class="headerlink" title="波浪号(~)"></a>波浪号(~)</h2><ul><li>表示home目录</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>定义变量如: myname=”test”<ul><li>变量名和等号之间不能有空格</li><li>首个字符必须为字母（a-z，A-Z）</li><li>中间不能有空格，可以使用下划线(_)</li><li>不能使用标点符号</li><li>不能使用bash里的关键字</li></ul></li><li>使用变量<ul><li>变量名前加美元符号</li><li>推荐给所有变量加花括号</li><li>已定义的变量可以重新被定义</li></ul></li><li>只读变量<ul><li>使用 readonly 命令可以将变量定义为只读变量</li></ul></li><li>特殊变量<ul><li>局部变量 这种变量只有在代码块或者函数中才可见</li><li>环境变量 这种变量将影响用户接口和 shell 的行为</li></ul></li><li>位置参数<ul><li>从命令行传递到脚本的参数：0，1，2，3… 9之后的位置参数就必须用大括号括起来了，比如，{10}，{11}，11，{12}，0就是脚本文件自身的名字，1 是第一个参数</li><li>$# ： 传递到脚本的参数个数</li><li>$* ： 以一个单字符串显示所有向脚本传递的参数。与位置变量不同,此选项参数可超过 9</li><li>$$ ： 脚本运行的当前进程 ID号</li><li>$! ： 后台运行的最后一个进程的进程 ID号</li><li>$@ ： 与$*相同,但是使用时加引号,并在引号中返回每个参数</li><li>$： 显示shell使用的当前选项,与 set命令功能相同</li><li>$? ： 显示最后命令的退出状态。 0表示没有错误,其他任何值表明有错误</li></ul></li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/bash# 作为用例, 调用这个脚本至少需要10个参数, 比如:# bash test.sh 1 2 3 4 5 6 7 8 9 10MINPARAMS=10echoecho "The name of this script is \"$0\"."echo "The name of this script is \"`basename $0`\"."echoif [ -n "$1" ]              # 测试变量被引用.thenecho "Parameter #1 is $1"  # 需要引用才能够转义"#"fi if [ -n "$2" ]thenecho "Parameter #2 is $2"fi if [ -n "${10}" ]  # 大于$9的参数必须用{}括起来.thenecho "Parameter #10 is ${10}"fi echo "-----------------------------------"echo "All the command-line parameters are: "$*""if [ $# -lt "$MINPARAMS" ]then echo echo "This script needs at least $MINPARAMS command-line arguments!"fi  echoexit 0</code></pre><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p><img src="/img/bash/bash-1.png" alt=""></p><ul><li>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 bc,awk 和 expr，expr 最常用</li><li>expr 是一款表达式计算工具，使用它能完成表达式的求值操作，使用反引号</li><li>表达式和运算符之间要有空格$a + $b写成$a+$b不行</li><li>条件表达式要放在方括号之间，并且要有空格[ $a == $b ]写成[$a==$b]不行</li><li>乘号（*）前边必须加反斜杠\才能实现乘法运算</li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/basha=10b=20val=`expr $a + $b`echo "a + b : $val"val=`expr $a - $b`echo "a - b : $val"val=`expr $a \* $b`echo "a * b : $val"val=`expr $b / $a`echo "b / a : $val"val=`expr $b % $a`echo "b % a : $val"if [ $a == $b ]then   echo "a == b"fiif [ $a != $b ]then   echo "a != b"fi</code></pre><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p><img src="/img/bash/bash-2.png" alt=""></p><pre class=" language-Bash"><code class="language-Bash">#!/bin/basha=10b=20if [ $a -eq $b ]then   echo "$a -eq $b : a == b"else   echo "$a -eq $b: a != b"fi</code></pre><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><img src="/img/bash/bash-3.png" alt=""></p><pre class=" language-Bash"><code class="language-Bash">#!/bin/basha=10b=20if [[ $a -lt 100 && $b -gt 100 ]]then   echo "return true"else   echo "return false"fiif [[ $a -lt 100 || $b -gt 100 ]]then   echo "return true"else   echo "return false"fi</code></pre><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p><img src="/img/bash/bash-4.png" alt=""></p><pre class=" language-Bash"><code class="language-Bash">#!/bin/basha="abc"b="efg"if [ $a = $b ]then   echo "$a = $b : a == b"else   echo "$a = $b: a != b"fiif [ -n $a ]then   echo "-n $a : The string length is not 0"else   echo "-n $a : The string length is  0"fiif [ $a ]then   echo "$a : The string is not empty"else   echo "$a : The string is empty"fi</code></pre><h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h2><p><img src="/img/bash/bash-5.png" alt=""></p><pre class=" language-Bash"><code class="language-Bash">#!/bin/bashfile="/home/shiyanlou/test.sh"if [ -r $file ]then   echo "The file is readable"else   echo "The file is not readable"fiif [ -e $file ]then   echo "File exists"else   echo "File not exists"fi</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li>if</li></ul><pre class=" language-Bash"><code class="language-Bash">if conditionthen    command1     command2    ...    commandN fi</code></pre><ul><li>if else</li></ul><pre class=" language-Bash"><code class="language-Bash">if conditionthen    command1     command2    ...    commandNelse    commandfi</code></pre><ul><li>if-elif-else</li></ul><pre class=" language-Bash"><code class="language-Bash">if condition1then    command1elif condition2 then     command2else    commandNfi</code></pre><ul><li>for</li></ul><pre class=" language-Bash"><code class="language-Bash">for var in item1 item2 ... itemNdo    command1    command2    ...    commandNdonefor loop in 1 2 3 4 5do    echo "The value is: $loop"donefor str in This is a stringdo    echo $strdone#This#is#a#string</code></pre><ul><li>while</li></ul><pre class=" language-Bash"><code class="language-Bash">while conditiondo    commanddone#!/bin/bashint=1while(( $int<=5 ))do    echo $int    let "int++"done#输入信息被设置为变量MAN，按结束循环echo 'press <CTRL-D> exit'echo -n 'Who do you think is the most handsome: 'while read MANdo    echo "Yes! $MAN is readlly handsome"done#死循环while :do    commanddonewhile truedo    commanddonefor (( ; ; ))</code></pre><ul><li>until </li></ul><pre class=" language-Bash"><code class="language-Bash">#直至条件为真时停止until conditiondo    commanddone</code></pre><ul><li>case<ul><li>取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;</li><li>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令</li></ul></li></ul><pre class=" language-Bash"><code class="language-Bash">case 值 in模式1)    command1    command2    ...    commandN    ;;模式2）    command1    command2    ...    commandN    ;;esacecho 'Enter a number between 1 and 4:'echo 'The number you entered is:'read aNumcase $aNum in    1)  echo 'You have chosen 1'    ;;    2)  echo 'You have chosen 2'    ;;    3)  echo 'You have chosen 3'    ;;    4)  echo 'You have chosen 4'    ;;    *)  echo 'You did not enter a number between 1 and 4'    ;;esac#Enter a number between 1 and 4:#The number you entered is:#3#You have chosen 3</code></pre><ul><li>break</li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/bashwhile :do    echo -n "Enter a number between 1 and 5:"    read aNum    case $aNum in        1|2|3|4|5) echo "The number you entered is $aNum!"        ;;        *) echo "The number you entered is not between 1 and 5! game over!"            break        ;;    esacdone#Enter a number between 1 and 5:3#The number you entered is 3!#Enter a number between 1 and 5:7#The number you entered is not between 1 and 5! game over!</code></pre><ul><li>continue</li></ul><pre class=" language-Bash"><code class="language-Bash">#!/bin/bashwhile :do    echo -n "Enter a number between 1 and 5: "    read aNum    case $aNum in        1|2|3|4|5) echo "The number you entered is $aNum!"        ;;        *) echo "The number you entered is not between 1 and 5!"            continue            echo "game over"        ;;    esacdone</code></pre><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><ul><li>可以带function fun() 定义，也可以直接fun() 定义,不带任何参数</li><li>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</li><li>函数返回值在调用该函数后通过 $? 来获得</li><li>所有函数在使用前必须定义</li></ul><pre class=" language-Bash"><code class="language-Bash">[ function ] funname [()]{    action;    [return int;]}#!/bin/bashfunWithReturn(){    echo "This function will add the two numbers of the input..."    echo "Enter the first number: "    read aNum    echo "Enter the second number: "    read anotherNum    echo "The two numbers are $aNum and $anotherNum !"    return $(($aNum+$anotherNum))}funWithReturnecho "The sum of the two numbers entered is $? !"</code></pre><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><pre class=" language-Bash"><code class="language-Bash">#!/bin/bashfunWithParam(){    echo "The first parameter is $1 !"    echo "The second parameter is $2 !"    echo "The tenth parameter is $10 !"    echo "The tenth parameter is ${10} !"    echo "The eleventh parameter is ${11} !"    echo "The total number of parameters is $# !"    echo "Outputs all parameters as a string $* !"}funWithParam 1 2 3 4 5 6 7 8 9 34 73#The first parameter is 1 !#The second parameter is 2 !#The tenth parameter is 10 !#The tenth parameter is 34 !#The eleventh parameter is 73 !#The total number of parameters is 11 !#Outputs all parameters as a string 1 2 3 4 5 6 7 8 9 34 73 !#$10不能获取第十个参数</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux base use</title>
      <link href="/2020/04/14/Linux/"/>
      <url>/2020/04/14/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Ctrl+d 退出终端</li><li>Ctrl+s 暂停 任意键恢复</li><li>Ctrl+z 后台运行 fg恢复</li><li>Ctrl+a 光标移至 头</li><li>Ctrl+e 光标移至 尾</li><li>Ctrl+k 删除光标所在到尾</li><li>Alt+Backspace 向前删除一个单词</li><li>Shift+PgUp 终端显示向上</li><li>Shift+PgDn 终端显示向下</li></ul><h2 id="Shell通配符"><a href="#Shell通配符" class="headerlink" title="Shell通配符"></a>Shell通配符</h2><ul><li>* 匹配0或多个字符</li><li>? 匹配任意一个字符</li><li>[list] 匹配list中任意单一字符</li><li>[^list] 匹配除list中任意单一字符以外字符</li><li>[c1-c2] 匹配c1-c2中任意单一字符 :[0-9][a-z]</li><li>{string1,string2,..} 匹配string1或string2..其一字符串</li><li>{c1..c2} 匹配c1-c2中全部字符 :{1..10}</li></ul><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><ul><li>1 一般命令</li><li>2 系统调用</li><li>3 库函数(c标准函数库)</li><li>4 特殊文件(/dev 设备)和驱动程序</li><li>5 文件格式和约定</li><li>6 游戏和屏保</li><li>7 杂项</li><li>8 系统管理命令和守护进程</li></ul><h2 id="pic-char"><a href="#pic-char" class="headerlink" title="pic char"></a>pic char</h2><ul><li>banner  sysvbanner printerbanner</li><li>toilet</li><li>figlet</li></ul><h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><ul><li>-a 打印能打印</li><li>-d 打印死掉进程</li><li>-m 同am i,mom likes</li><li>-q 打印当前登录用户数及用户名</li><li>-u 打印当前登录用户登录信息</li><li>-r 打印运行等级</li></ul><h2 id="add-user"><a href="#add-user" class="headerlink" title="add user"></a>add user</h2><ul><li>sudo adduser kanseer 创建kanseer(默认组与用户名相同)</li><li>su -l kanseer 切换kanseer用户</li><li>useradd 只创建用户 手动passwd设置密码</li></ul><h2 id="add-groups"><a href="#add-groups" class="headerlink" title="add groups"></a>add groups</h2><ul><li>groups kanseer 显示用户:用户组</li></ul><h2 id="add-root-p"><a href="#add-root-p" class="headerlink" title="add root p"></a>add root p</h2><ul><li>sudo usermod -G sudo kanseer</li></ul><h2 id="del-user"><a href="#del-user" class="headerlink" title="del user"></a>del user</h2><ul><li>sudo deluser kanseer –remove-home</li></ul><h2 id="del-group"><a href="#del-group" class="headerlink" title="del group"></a>del group</h2><ul><li>groupdel</li></ul><h2 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a>ls -l</h2><p><img src="/img/linuxbu/linux-1.png" alt=""><br><img src="/img/linuxbu/linux-2.png" alt=""></p><ul><li>-a 显示隐藏文件</li><li>-d 查看目录</li><li>-s 显示文件大小</li><li>-S 按文件大小</li></ul><h2 id="change-file-author"><a href="#change-file-author" class="headerlink" title="change file author"></a>change file author</h2><ul><li>sudo chown user file</li></ul><h2 id="change-file-p"><a href="#change-file-p" class="headerlink" title="change file p"></a>change file p</h2><p>  <img src="/img/linuxbu/linux-3.png" alt=""></p><ul><li>chmod 600 file</li><li>chmod go+rw file g group o others u user -+权限</li></ul><h2 id="FHS标准"><a href="#FHS标准" class="headerlink" title="FHS标准"></a>FHS标准</h2><p><img src="/img/linuxbu/linux-4.png" alt=""></p><h2 id="文件四种交互作用形态"><a href="#文件四种交互作用形态" class="headerlink" title="文件四种交互作用形态"></a>文件四种交互作用形态</h2><p><img src="/img/linuxbu/linux-5.png" alt=""></p><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><ul><li>p 创建多级目录文件</li></ul><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><ul><li>cp file dir 复制文件到指定目录</li><li>-r or -R 复制目录</li></ul><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><ul><li>rm file </li><li>-f 强制 -r 递归</li></ul><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><ul><li>mv source dir 移动文件到指定目录</li><li>mv old new 重命名文件</li></ul><h2 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h2><ul><li>rename ‘s/.txt/.c/‘ *.txt 批量将后缀为.txt改为.c</li><li>rename ‘y/a-z/A-Z’ *.c 批量将文件名和后缀大写</li></ul><h2 id="check-file"><a href="#check-file" class="headerlink" title="check file"></a>check file</h2><ul><li>cat 正序</li><li>tac 倒序</li><li>-b 指定添加行号的方式<ul><li>b a : 表示无论是否为空行,同样列出行号(“cat -n”就是这种方式)</li><li>b t : 只列出非空行的编号并列出(默认为这种方式)</li></ul></li><li>-n : 设置行号的样式，主要有三种：<ul><li>n ln : 在行号字段最左端显示</li><li>n rn : 在行号字段最右边显示，且不加 0</li><li>n rz : 在行号字段最右边显示，且加 0</li></ul></li><li>-w : 行号字段占用的位数(默认为 6 位)</li><li>nl file 添加行号并打印</li></ul><h2 id="more-less"><a href="#more-less" class="headerlink" title="more less"></a>more less</h2><h2 id="head-tail"><a href="#head-tail" class="headerlink" title="head tail"></a>head tail</h2><ul><li>-n 1</li><li>-f 实现不停地读取某个文件的内容并显示</li></ul><ul><li><p>file</p><ul><li>file file 查看文件类型</li></ul></li><li><p>edit</p><ul><li>vimtutor</li></ul></li><li><p>xeyes</p><ul><li>nohup xeyes &amp; 后台运行</li></ul></li><li><p>kill</p><ul><li>sudo kill -9 PID 杀死进程</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcc&amp;makefile</title>
      <link href="/2020/04/09/gcc-makefile/"/>
      <url>/2020/04/09/gcc-makefile/</url>
      
        <content type="html"><![CDATA[<h1 id="gcc-与-makefile"><a href="#gcc-与-makefile" class="headerlink" title="gcc 与 makefile"></a>gcc 与 makefile</h1><h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><ul><li>-E  预编译</li><li>-S  汇编</li><li>-c  编译</li><li>-o 链接</li><li>-g  产生调试信息</li><li>-D  宏定义</li><li>-I  include文件位置</li><li>-L 连接库位置</li><li>-l  库名</li><li>-O 优化选项 -O1，-O2，-O3</li><li>-Wall  显示警告</li></ul><h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><ul><li>显示规则</li></ul><pre class=" language-makefile"><code class="language-makefile">      target：dependency          cd</code></pre><ul><li>变量</li></ul><pre class=" language-makefile"><code class="language-makefile">      <span class="token comment" spellcheck="true">#定义变量</span>      OBJ<span class="token operator">=</span>      OBJ<span class="token operator">:=</span>      OBJ<span class="token operator">+=</span>      <span class="token comment" spellcheck="true">#引用变量</span>      <span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span></code></pre><ul><li><p>通配符</p><ul><li>%任意一个</li><li>*所有</li><li>？匹配一个</li></ul></li><li><p>常量</p><ul><li>$@:代表目标文件$(TARGET)</li><li>$^:代表依赖文件</li><li>$&lt;:代表第一个依赖文件</li></ul></li><li><p>隐示规则：make有智能性，能推断生成出%.o依赖%.c</p></li></ul><h2 id="程序发布流程"><a href="#程序发布流程" class="headerlink" title="程序发布流程"></a>程序发布流程</h2><ul><li>查看elf文件<ul><li>readelf 命令</li></ul></li><li>生成符号表<ul><li>objcopy –only-keep-debug test test.symbol</li></ul></li><li>去掉符号表(release)<ul><li>objcopy –strip-debug test test.release</li><li>strip test.release</li></ul></li><li>添加符号表(debug)<ul><li>gdb -q -symbol=test.symbol –exec=test.release</li></ul></li><li>查看符号表<ul><li>symbol-file ./test.symbol</li></ul></li></ul><h2 id="单目录makefile模板"><a href="#单目录makefile模板" class="headerlink" title="单目录makefile模板"></a>单目录makefile模板</h2><pre class=" language-makefile"><code class="language-makefile">SRC<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">wildcard</span> *.c<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#获取目录所有.c文件</span>OBJ<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %.c,%.o,<span class="token variable">$</span><span class="token punctuation">(</span>SRC<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#替换.c为.o</span>TARGET<span class="token operator">=</span>                         <span class="token comment" spellcheck="true">#目标</span>INCLUDE<span class="token operator">=</span>                        <span class="token comment" spellcheck="true">#头文件</span>DEFS<span class="token operator">=</span>                            <span class="token comment" spellcheck="true">#宏定义</span>CFLAGES<span class="token operator">=</span> -g                        <span class="token comment" spellcheck="true">#参数</span>CC<span class="token operator">=</span> gcc                            <span class="token comment" spellcheck="true">#编译器</span>LIB_PATH<span class="token operator">=</span> -L/home/lib/            <span class="token comment" spellcheck="true">#第三方库位置</span>LIBS<span class="token operator">=</span> -lpthread                    <span class="token comment" spellcheck="true">#库名称</span>RELEASE<span class="token operator">=</span> release            SYMBOL<span class="token operator">=</span> symbol<span class="token symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span>    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGES<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$^</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIB——PATH<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span><span class="token symbol"><span class="token variable">$</span>(RELEASE)</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>    objcopy --strip-debug <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.<span class="token variable">$</span><span class="token punctuation">(</span>RELEASE<span class="token punctuation">)</span>    strip <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.<span class="token variable">$</span><span class="token punctuation">(</span>RELEASE<span class="token punctuation">)</span><span class="token symbol"><span class="token variable">$</span>(SYMBOL)</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>    objcopy --only-keep-debug <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.<span class="token variable">$</span><span class="token punctuation">(</span>SYMBOL<span class="token punctuation">)</span><span class="token builtin">.PHONY</span><span class="token punctuation">:</span><span class="token symbol">clean</span><span class="token punctuation">:</span>    rm -rf *.o <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.<span class="token variable">$</span><span class="token punctuation">(</span>RELEASE<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.<span class="token variable">$</span><span class="token punctuation">(</span>SYMBOL<span class="token punctuation">)</span> </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2020/03/30/Redis/"/>
      <url>/2020/03/30/Redis/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NoSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2020/03/27/SpringMVC/"/>
      <url>/2020/03/27/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><blockquote><ul><li>我们的开发架构一般都是基于两种形式，一种是 C/S 架构，也就是客户端/服务器，另一种是 B/S 架构，也就 是浏览器服务器。在 JavaEE 开发中，几乎全都是基于 B/S 架构的开发。那么在 B/S 架构中，系统标准的三层架构 包括：表现层、业务层、持久层。三层架构在我们的实际开发中使用的非常多，所以我们课程中的案例也都是基于 三层架构设计的我们的开发架构一般都是基于两种形式，一种是 C/S 架构，也就是客户端/服务器，另一种是 B/S 架构，也就 是浏览器服务器。在 JavaEE 开发中，几乎全都是基于 B/S 架构的开发。那么在 B/S 架构中，系统标准的三层架构 包括：表现层、业务层、持久层。三层架构在我们的实际开发中使用的非常多.</li><li>表现层<ul><li>也就是我们常说的web层.它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求 web 层，web 需要接收 http 请求，完成 http 响应</li><li>表现层包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示</li><li>表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理结果响应给客户端</li><li>表现层的设计一般都使用 MVC 模型.（MVC 是表现层的设计模型，和其他层没有关系）</li></ul></li><li>业务层<ul><li>也就是我们常说的 service 层.它负责业务逻辑处理，和我们开发项目的需求息息相关.web 层依赖业 务层，但是业务层不依赖 web 层.</li><li>业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（也就是我们说的， 事务应该放到业务层来控制）</li></ul></li><li>持久层<ul><li>也就是我们是常说的 dao 层.负责数据持久化，包括数据层即数据库和数据访问层，数据库是对数据进 行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层将数据持久化到数据库 中.通俗的讲，持久层就是和数据库交互，对数据库表进行曾删改查的</li></ul></li></ul></blockquote><hr><h2 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h2><blockquote><ul><li><p>MVC 全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写， 是一种用于设计创建 Web 应用程序表现层的模式。MVC 中每个部分各司其职</p></li><li><p>Model</p><ul><li>通常指的就是我们的数据模型。作用一般情况下用于封装数据</li></ul></li><li>View<ul><li>通常指的就是我们的 jsp 或者 html。作用一般就是展示数据的</li></ul></li><li>Controller<ul><li>是应用程序中处理用户交互的部分。作用一般就是处理程序逻辑的</li></ul></li></ul></blockquote><hr><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><blockquote><ul><li>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于 Spring FrameWork 的后续产品，已经融合在 Spring Web Flow 里面。Spring 框架提供了构建 Web 应用程序的全功 能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用 Spring 进行 WEB 开发时，可以选择使用 Spring 的 Spring MVC 框架或集成其他 MVC 开发框架，如 Struts1(现在一般不用)，Struts2 等。 SpringMVC 已经成为目前最主流的 MVC 框架之一，并且随着 Spring3.0 的发布，全面超越 Struts2，成 为最优秀的 MVC 框架。 它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持 RESTful 编程风格的请求</li></ul></blockquote><p><img src="/img/SpringMVC.png" alt=""></p><hr><h2 id="SpringMVC优势"><a href="#SpringMVC优势" class="headerlink" title="SpringMVC优势"></a>SpringMVC优势</h2><blockquote><ul><li>清晰的角色划分<ul><li>前端控制器（DispatcherServlet）</li><li>请求到处理器映射（HandlerMapping）</li><li>处理器适配器（HandlerAdapter）</li><li>视图解析器（ViewResolver）</li><li>处理器或页面控制器（Controller）</li><li>验证器（ Validator）</li><li>命令对象（Command 请求参数绑定到的对象就叫命令对象）</li><li>表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）</li></ul></li><li>分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要.</li><li>由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象.</li><li>和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的.</li><li>可适配，通过 HandlerAdapter 可以支持任意的类作为处理器.</li><li>可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制.</li><li>功能强大的数据验证、格式化、绑定机制.</li><li>利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试.</li><li>本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换.</li><li>强大的 JSP 标签库，使 JSP 编写更容易.</li><li>RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配 置支持等等.</li></ul></blockquote><hr><h2 id="SpringMVC和Structs2优劣分析"><a href="#SpringMVC和Structs2优劣分析" class="headerlink" title="SpringMVC和Structs2优劣分析"></a>SpringMVC和Structs2优劣分析</h2><blockquote><ul><li>共同点<ul><li>它们都是表现层框架，都是基于 MVC 模型编写的</li><li>它们的底层都离不开原始 ServletAPI</li><li>它们处理请求的机制都是一个核心控制器</li></ul></li><li>区别<ul><li>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter </li><li>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类.所 以 Spring MVC 会稍微比 Struts2 快些.</li><li>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便(JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注 解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了)</li><li>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提 升，尤其是 struts2 的表单标签，远没有 html 执行效率高.</li></ul></li></ul></blockquote><hr><h2 id="SpringMVC入门"><a href="#SpringMVC入门" class="headerlink" title="SpringMVC入门"></a>SpringMVC入门</h2><blockquote><ul><li>web.xml</li></ul></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span><span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 spring mvc 的核心控制器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVCDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>            org.springframework.web.servlet.DispatcherServlet        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置初始化参数，用于读取 SpringMVC 的配置文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:SpringMVC.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置 servlet 的对象的创建时间点：应用加载时创建。取值只能是非 0 正整数，表示启动顺序 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVCDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><blockquote><ul><li>SpringMVC.xml</li></ul></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 配置创建 spring 容器要扫描的包 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 配置视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置spring开启注解mvc的支持--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><blockquote><ul><li>编写控制器</li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token punctuation">(</span><span class="token string">"helloController"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloController 的 sayHello 方法执行了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="SpringMVC请求响应流程"><a href="#SpringMVC请求响应流程" class="headerlink" title="SpringMVC请求响应流程"></a>SpringMVC请求响应流程</h2><p><img src="/img/SpringMVC1.png" alt=""></p><hr><h2 id="SpringMVC组件"><a href="#SpringMVC组件" class="headerlink" title="SpringMVC组件"></a>SpringMVC组件</h2><blockquote><ul><li>DispatcherServlet：前端控制器<ul><li>用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由 它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性</li></ul></li><li>HandlerMapping：处理器映射器<ul><li>HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的 映射方式，例如：配置文件方式，实现接口方式，注解方式等</li></ul></li><li>Handler：处理器<ul><li>它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由 Handler 对具体的用户请求进行处理</li></ul></li><li>HandlAdapter：处理器适配器<ul><li>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理 器进行执行</li></ul></li><li>View Resolver：视图解析器<ul><li>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名 即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户</li></ul></li><li>View：视图<ul><li>SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView 等。我们最常用的视图就是 jsp.</li></ul></li><li><a href="mvc:annotation-driven" target="_blank" rel="noopener">mvc:annotation-driven</a>说明</li></ul></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为SpringMVC的三大组件使用&lt;mvc:annotation-driven> 自动加载RequestMappingHandlerMapping(处理映射器)和RequestMappingHandlerAdapter(处理适配器)--></span><span class="token comment" spellcheck="true">&lt;!-- 上面的标签相当于 如下配置--></span><span class="token comment" spellcheck="true">&lt;!-- Begin --></span><span class="token comment" spellcheck="true">&lt;!-- HandlerMapping --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- HandlerAdapter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- HadnlerExceptionResolvers --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- End --></span></code></pre><h2 id="请求参数绑定"><a href="#请求参数绑定" class="headerlink" title="请求参数绑定"></a>请求参数绑定</h2><blockquote><ul><li>绑定机制<ul><li>表单中请求参数都是基于 key=value</li><li>SpringMVC 绑定请求参数的过程是通过把表单提交请求参数，作为控制器中方法参数进行绑定的</li></ul></li><li>支持数据类型<ul><li>基本类型参数<ul><li>要求我们的参数名称必须和控制器中方法的形参名称保持一致。(严格区分大小写)</li></ul></li><li>POJO 类型参数<ul><li>要求表单中参数名称和 POJO 类的属性名称保持一致。并且控制器方法的参数类型是 POJO 类型</li></ul></li><li>数组和集合类型参数<ul><li>1.要求集合类型的请求参数必须在 POJO 中。在表单中请求参数名称要和 POJO 中集合属性名称相同。 给 List 集合中的元素赋值，使用下标</li><li>2.接收的请求参数是 json 格式数据。需要借助一个注解实现</li></ul></li></ul></li><li>请求参数中文乱码的解决(web,xml)</li></ul></blockquote><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 配置过滤器，解决中文乱码的问题 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filterclass</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 指定字符集 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><h2 id="自定义类型转换器实现Converter的接口"><a href="#自定义类型转换器实现Converter的接口" class="headerlink" title="自定义类型转换器实现Converter的接口"></a>自定义类型转换器实现Converter的接口</h2><blockquote><ul><li>自定义类型转换器</li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 把字符串转换成日期的转换器* @author rt*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Date<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Date <span class="token function">convert</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>source <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"参数不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析字符串</span>            Date date <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> date<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"类型转换错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><ul><li>注册自定义类型转换器，在springmvc.xml配置文件中编写配置</li></ul></blockquote><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 注册自定义类型转换器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.utils.StringToDateConverter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启Spring对MVC注解的支持 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><blockquote><ul><li>RequestParam注解<ul><li>作用：把请求中的指定名称的参数传递给控制器中的形参赋值</li><li>属性<ul><li>value：请求参数中的名称</li><li>required：请求参数中是否必须提供此参数，默认值是true，必须提供</li></ul></li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**    * 接收请求    * @return    */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><ul><li>RequestBody注解<ul><li>作用：用于获取请求体的内容（注意：get方法不可以）</li><li>属性<ul><li>required：是否必须有请求体，默认值是true</li></ul></li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**    * 接收请求    * @return    */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String body<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><ul><li>PathVariable注解<ul><li>作用：拥有绑定url中的占位符的。例如：url中有/delete/{id}，{id}就是占位符</li><li>属性<ul><li>value：指定url中的占位符名称</li></ul></li><li>Restful风格的URL<ul><li>请求路径一样，可以根据不同的请求方式去执行后台的不同方法</li><li>restful风格的URL优点<ul><li>结构清晰 , 符合标准 ,易于理解 ,扩展方便</li></ul></li></ul></li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"user/hello/1"</span><span class="token operator">></span>入门案例<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token comment" spellcheck="true">/**    * 接收请求    * @return    */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/hello/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><ul><li>RequestHeader注解<ul><li>作用：获取指定请求头的值</li><li>属性<ul><li>value：请求头的名称</li></ul></li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"Accept"</span><span class="token punctuation">)</span> String header<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><ul><li>CookieValue注解<ul><li>作用：用于获取指定cookie的名称的值</li><li>属性<ul><li>value：cookie的名称</li></ul></li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span> String cookieValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><ul><li>ModelAttribute注解<ul><li>作用<ul><li>出现在方法上：表示当前方法会在控制器方法执行前线执行</li><li>出现在参数上：获取指定的数据给参数赋值</li></ul></li><li>应用场景<ul><li>当提交表单数据不是完整的实体数据时，保证没有提交的字段使用数据库原来的数据</li></ul></li></ul></li></ul></blockquote><ul><li>修饰的方法有返回值</li></ul><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**    * 作用在方法，先执行    * @param name    * @return    */</span>    <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> User <span class="token function">showUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showUser执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟从数据库中查询对象</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">100d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 修改用户的方法    * @param cookieValue    * @return    */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>修饰的方法没有返回值</li></ul><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**    * 作用在方法，先执行    * @param name    * @return    */</span>    <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showUser执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟从数据库中查询对象</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">100d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 修改用户的方法    * @param cookieValue    * @return    */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><ul><li>SessionAttributes注解<ul><li>作用：用于多次执行控制器方法间的参数共享</li><li>属性<ul><li>value：指定存入属性的名称</li></ul></li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>value<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>types<span class="token operator">=</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 把数据存入到session域对象中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 向session中存入值    * @return    */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">save</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向session域中保存数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 从session中获取值    * @return    */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/find"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">find</span><span class="token punctuation">(</span>ModelMap modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer age <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">" : "</span><span class="token operator">+</span>password <span class="token operator">+</span><span class="token string">" : "</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 清除值    * @return    */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/delete"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span>SessionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        status<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JdbcTemplate</title>
      <link href="/2020/03/25/JdbcTemplate/"/>
      <url>/2020/03/25/JdbcTemplate/</url>
      
        <content type="html"><![CDATA[<h2 id="JdbcTemplate-概述"><a href="#JdbcTemplate-概述" class="headerlink" title="JdbcTemplate 概述"></a>JdbcTemplate 概述</h2><ul><li>它是 spring 框架中提供的一个对象，是对原始 Jdbc API 对象的简单封装。spring 框架为我们提供了很多<br>的操作模板类<ul><li>操作关系型数据<ul><li>JdbcTemplate</li><li>HibernateTemplate</li></ul></li><li>操作nosql数据库<ul><li>RedisTemplate</li></ul></li><li>操作消息队列<ul><li>JmsTemplate  </li></ul></li></ul></li></ul><hr><h2 id="JdbcTemplate对象的创建"><a href="#JdbcTemplate对象的创建" class="headerlink" title="JdbcTemplate对象的创建"></a>JdbcTemplate对象的创建</h2><pre class=" language-Java"><code class="language-Java">    public JdbcTemplate() {    }    public JdbcTemplate(DataSource dataSource) {        setDataSource(dataSource);        afterPropertiesSet();    }    public JdbcTemplate(DataSource dataSource, boolean lazyInit) {        setDataSource(dataSource);        setLazyInit(lazyInit);        afterPropertiesSet();}</code></pre><ul><li>spring 配置文件中配置 JdbcTemplate</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置一个数据库的操作模板：JdbcTemplate --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span>    &lt;bean id="dataSource"class="org.springframework.jdbc.datasource.DriverManagerDataSource">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///spring_day02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li>基本使用</li></ul><pre class=" language-Java"><code class="language-Java">public class JdbcTemplateDemo2 {    public static void main(String[] args) {        //1.获取 Spring 容器        ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");        //2.根据 id 获取 bean 对象        JdbcTemplate jt = (JdbcTemplate) ac.getBean("jdbcTemplate");        //3.执行操作        jt.execute("insert into account(name,money)values('eee',500)");    }}</code></pre><h2 id="在Dao使用JdbcTemplate-两种方式"><a href="#在Dao使用JdbcTemplate-两种方式" class="headerlink" title="在Dao使用JdbcTemplate (两种方式)"></a>在Dao使用JdbcTemplate (两种方式)</h2><ul><li>在 dao 中定义 JdbcTemplate</li><li>让 dao 继承 JdbcDaoSupport</li></ul><pre class=" language-Java"><code class="language-Java">//JdbcDaoSupport 是 spring 框架为我们提供的一个类，该类中定义了一个 JdbcTemplate 对象，我们可以直接获取使用，但是要想创建该对象，需要为其提供一个数据源具体源码如下public abstract class JdbcDaoSupport extends DaoSupport {    //定义对象    private JdbcTemplate jdbcTemplate;    //set 方法注入数据源，判断是否注入了，注入了就创建 JdbcTemplate    public final void setDataSource(DataSource dataSource) {        if (this.jdbcTemplate == null || dataSource != this.jdbcTemplate.getDataSource())        { //如果提供了数据源就创建 JdbcTemplate            this.jdbcTemplate = createJdbcTemplate(dataSource);            initTemplateConfig();        }    }    //使用数据源创建 JdcbTemplate    protected JdbcTemplate createJdbcTemplate(DataSource dataSource) {        return new JdbcTemplate(dataSource);    }    //当然，我们也可以通过注入 JdbcTemplate 对象    public final void setJdbcTemplate(JdbcTemplate jdbcTemplate) {        this.jdbcTemplate = jdbcTemplate;        initTemplateConfig();    }    //使用 getJdbcTmeplate 方法获取操作模板对象    public final JdbcTemplate getJdbcTemplate() {        return this.jdbcTemplate;    }</code></pre><ul><li>区别<ul><li>第一种在Dao类中定义JdbcTemplate的方式,适用于所有配置方式(xml 和注解都可以).</li><li>第二种让Dao继承JdbcDaoSupport的方式,只能用于基于 XML 的方式,注解用不了.</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2020/03/24/MySQL/"/>
      <url>/2020/03/24/MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><ul><li>压缩版</li><li>解压</li><li>配置环境变量,bin目录</li><li>新建my.ini<pre class=" language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span><span class="token constant">basedir</span><span class="token attr-value"><span class="token punctuation">=</span>D:/Environment/mysql-5.7</span><span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span>D:/Environment/mysql-5.7/data</span><span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span>skip-grant-tables</code></pre></li><li>管理员模式cmd bin目录下</li><li>安装mysql服务</li><li>初始化数据库文件<pre><code>mysqld -installmysqld --initialize-insecure --user=root</code></pre></li><li>启动服务<pre><code>net start mysql</code></pre></li><li>启动mysql修改密码<pre><code>update mysql.user set authentication_string=password('123456') where user='root' and Host = 'localhost';</code></pre></li><li>刷新flush privileges,删除my.ini中的skip-grant-tables</li><li>重启mysql服务<ul><li>net stop mysql</li><li>net start mysql</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-transaction</title>
      <link href="/2020/01/11/Spring-three/"/>
      <url>/2020/01/11/Spring-three/</url>
      
        <content type="html"><![CDATA[<h2 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h2><ul><li><p>在Spring 配置文件中对象名和ref=”id”id 名相同使用自动注入,可以不配置<property></property></p><ul><li>在<bean>中通过autowire=”” 配置,只对这个<bean>生效</bean></bean></li><li>在<beans>中通过default-autowire=””配置,表当当前文件中所有<bean>都是全局配置内容</bean></beans></li></ul></li><li><p>autowire=”” 可取值</p><ul><li><p>default: 默认值,根据全局default-autowire=””值.默认全局和局部都没有配置情况下,相当于no</p></li><li><p>no: 不自动注入</p></li><li><p>byName: 通过名称自动注入.在Spring 容器中找类的Id</p></li><li><p>byType: 根据类型注入</p><ul><li>spring 容器中不可以出现两个相同类型的<bean></bean></li></ul></li><li><p>constructor: 根据构造方法注入</p><ul><li>提供对应参数的构造方法</li><li>底层使用byName, 构造方法参数名和其他<bean>的id相同</bean></li></ul></li></ul></li></ul><h2 id="Spring-中加载properties-文件"><a href="#Spring-中加载properties-文件" class="headerlink" title="Spring 中加载properties 文件"></a>Spring 中加载properties 文件</h2><ul><li><p>在spring 配置文件中先引入xmlns:context</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>在被Spring 管理的类中通过@Value(“${key}”)取出properties 中内容</p></li></ul><h2 id="scope-属性"><a href="#scope-属性" class="headerlink" title="scope 属性"></a>scope 属性</h2><ul><li><bean>的属性,控制对象有效范围(单例,多例等),默认单例</bean></li><li>scope 可取值<ul><li>singleton 默认值,单例</li><li>prototype 多例,每次获取重新实例化</li><li>request 每次请求重新实例化</li><li>session 每个会话对象内,对象是单例的</li><li>application 在application 对象内是单例</li><li>global session spring 推出的一个对象, 依赖于spring-webmvc-portlet ,类似于session</li></ul></li></ul><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><ul><li>在应用程序有保证最多只能有一个实例</li><li>提升运行效率,实现数据共享</li><li>懒汉式(由于添加了锁,所以导致效率低)</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//由于对象需要被静态方法调用,把方法设置为static</span>    <span class="token comment" spellcheck="true">//由于对象是static,必须要设置访问权限修饰符为private,如果是public 可以直接调用对象,不执行访问入口</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleTon singleton<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 方法名和类名相同    * 无返回值.    *    * 其他类不能实例化这个类对象    * 对外提供访问入口    */</span>    <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 实例方法,实例方法必须通过对象调用    *    * 设置方法为静态方法    *    * @return    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//添加逻辑如果实例化过,直接返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        * 多线程访问下,可能出现if 同时成立的情况,添加锁        */</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SingleTon<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//双重验证</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>singleton<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>饿汉式<ul><li>解决了懒汉式中多线程访问可能出现同一个对象和效率低问题</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在类加载时进行实例化.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleTon singleton<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><ul><li>编程式事务<ul><li>由程序员编写事务控制代码</li></ul></li><li>声明式事务<ul><li>事务控制代码由spring写好,只需如何进行事务控制</li><li>针对ServiceImpl类下方法的</li><li>基于通知(advice)的</li></ul></li><li>配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- SqlSessionFactory --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whgc.pojo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 扫描器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.whgc.mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;property name="sqlSessionFactory" ref="factory">&lt;/property> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring jdbc中 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置声明式事务 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ins*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>del*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upd*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 切点范围设置大些 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.whgc.service.impl.*.*(..))<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><ul><li>声明式事务属性<ul><li>name=”” 哪些方法</li><li>readonly=”Boolean” 是否只读事务 false默认值</li><li>propagation 控制事务传播行为 <ul><li>当一个具有事务控制方法被另一个有事务控制方法调用后,需要如何管理事务(新建事务?在事务中执行?把事务挂起?报异常?)</li><li>REQUIRED(默认值):如果当前有事务,就在事务中执行,如果没有,就新建一个事务</li><li>SUPPORTS:如果当前有事务,就在事务中执行,如果没有,就在非事务下执行</li><li>MANDATORY:必须在事务中执行,如果当前有事务,就在事务中执行,如果没有事务,报错</li><li>REQUIRES_NEW:必须在事务中执行,如果当前没有事务,新建事务,如果有事务,把当前事务挂起</li><li>NOT_SUPPORTED:必须在非事务下执行,如果没有事务,正常执行,如果有事务,把当前事务挂起</li><li>NEVER:必须在非事务状态下执行,如果当前没有事务,正常执行,如果当前有事务,报错</li><li>NESTED:必须在事务状态下执行,如果没有事务,新建事务,如果有事务,创建一个嵌套事务</li></ul></li><li>isolation=”” 事务隔离级别(在多线程或并发下如何保证访问到的数据具有完整性)<ul><li>脏读: 一个事务(A)读取到另一个事务(B)中未提交的数据,另一个事务(B)中数据可能进行了改变,此时A事务读取的数据可能和数据库中数据不一致,此时数据是脏数据</li><li>不可重复度(某行,针对修改,两次读取在一个事务内)当事务A第一次读取事务,事务B对事务A读取的数据进行修改,事务A中再次读取数据和之前数据不一致,过程不可重复读</li><li>幻读(针对新增删除,两次事务结果)事务A按照特定条件查询出结果,事务B新增了一条符合条件的数据,事务A中查询的数据和数据库中<br>的数据不一致,事务A好像出现了幻觉,这种情况称为幻读</li><li>DEFAULT:默认值,由底层自动判断应该使用什么是事务隔离</li><li>READ_UNCOMMITTED:可以读取未提交数据,可能出现脏读,不重复读,幻读. 效率最高</li><li>READ_COMMITED:只能读取其他事务已提交事务,可防止脏读,可能出现不可重复读,幻读</li><li>REPEATABLE_READ:读取的数据被添加锁,防止其他事物修改此数据,可防止不可重复读,可能出现幻读</li><li>SERIALIZABLE:排队操作对整个表添加锁,一个事务在操作数据时,另一个事务等待事务操作完成后才能操作这个表.最安全,效率最低</li></ul></li><li>rollback-for=”异常类型全限定路径”:当出现什么异常时需要进行回滚</li><li>no-rollback-for:当出现什么异常不回滚</li></ul></li></ul><h2 id="spring常用注解"><a href="#spring常用注解" class="headerlink" title="spring常用注解"></a>spring常用注解</h2><ul><li>@Component 创建类对象,相当于<bean></bean></li><li>@Service  ServiceImpl类上</li><li>@Repository 写在数据访问层上</li><li>@Controller 控制器类上</li><li>@Resource(不需要写对象get/set)    java注解 默认按照byName注入,如果没有名称按byType</li><li>@Autowired(不需要写对象get/set)    spring注解 默认按照byType注入</li><li>@Value() 获取properties文件中内容</li><li>@Pointcut() 定义切点</li><li>@Aspect() 定义切面类</li><li>@Before() 前置通知</li><li>@After() 后置通知</li><li>@AfterReturning 后置通知,切点必须正确执行</li><li>@AfterThrowing 异常通知</li><li>@Arround 环绕通知</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-synopsis</title>
      <link href="/2020/01/11/Spring-one/"/>
      <url>/2020/01/11/Spring-one/</url>
      
        <content type="html"><![CDATA[<h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><ul><li><p>IOC/DI 控制反转/依赖注入</p></li><li><p>AOP 面向切面编程</p></li><li><p>声明式事务</p></li></ul><h2 id="Spring-runtime"><a href="#Spring-runtime" class="headerlink" title="Spring runtime"></a>Spring runtime</h2><ul><li><p>test: spring提供测试功能</p></li><li><p>Core Container: 核心容器 spring启动最基本的条件</p></li><li><p>Beans: spring负责创建类对象并管理对象</p><ul><li>Core: 核心类</li><li>Context: 上下文参数.获取外部资源或者管理注解等</li><li>SpEl: 表达式语言</li></ul></li><li><p>AOP: 实现aop功能需要依赖</p></li><li>Aspects: 切面AOP依赖的包</li><li><p>Data Access/Integration: spring封装数据访问层相关内容</p><ul><li>JDBC: spring对JDBC封装的代码</li><li>ORM: 封装了持久层框架的代码.(Hibernate)</li><li>transaction: spring-tx.jar,声明事务使用</li></ul></li><li><p>WEB: spring完成web相关功能是需要</p></li></ul><p>​        由Tomcat加载配置文件时需要spring-web.jar</p><p>​    <img src="/img/spring-runtime.jpg" alt=""></p><h2 id="IOC-控制反转-是什么"><a href="#IOC-控制反转-是什么" class="headerlink" title="IOC(控制反转)是什么"></a>IOC(控制反转)是什么</h2><p>​    IoC完成new实例化对象事情,控制指控制类对象,反转指转交给spring负责</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><p>四个核心包一个日志包(commons-logging)</p></li><li><p>src下新建applicationContext.xml(文件名称路径可自定义)</p></li><li><p>记住spring容器ApplicationContext,applicationContext.xml配置信息最终存储到了ApplicationContext容器中</p></li><li><p>spring配置文件基于schema(.xsd),每次引入一个xsd文件是一个 namespace(xmlns)</p></li><li><p>配置文件只需引入基本schema,通过<bean>创建对象,默认配置文件被加载时创建对象</bean></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>&lt;beansxmlns="http://www.springframework.org/schema/beans"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instancexsi:schemaLocation="http://www.springframework.org/shema/beanshttp://www.springframework.org/schema/beans/spring-bans.xsd"><span class="token comment" spellcheck="true">&lt;!-- id 表示获取到对象标识   class创建哪个类的对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>peo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.pojo.People<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试方法</p><pre class=" language-java"><code class="language-java">ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>"applicationContext<span class="token punctuation">.</span>xml"<span class="token punctuation">)</span><span class="token punctuation">;</span>People people <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"peo"</span><span class="token punctuation">,</span>People<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="Spring创建对象三种方式"><a href="#Spring创建对象三种方式" class="headerlink" title="Spring创建对象三种方式"></a>Spring创建对象三种方式</h2><ul><li><p>通过构造方法</p><ol><li>无参构造(默认)</li><li>有参构造(需配置)<ul><li>需在类提供有参构造方法</li><li>在<construction-arg>标签配置(条件匹配多个构造执行最后一个)</construction-arg></li><li>参数 <ul><li>index:参数索引(0开始)</li><li>name: 参数名</li><li>type: 类型(区分int和Integer)</li></ul></li></ul></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>peo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.pojo.People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- ref 引用另一个 bean value 基本数据类型或String 等 --></span>&lt;constructor-arg index="0" name="id" type="int"value="123"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>&lt;constructor-arg index="1" name="name"type="java.lang.String" value="张三"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ul><ul><li><p>通过实例工厂</p><p>​    - 工厂设计模式:帮助创建类对象,一个工厂可以生产多个对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PeopleFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> People <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    - 在applicationContext.xml配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.pojo.PeopleFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>peo1<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>newInstance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>静态工厂</p><p>​    - static 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PeopleFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> People <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    - 在applicationContext.xml配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>peo2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.pojo.PeopleFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>newInstance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="给Bean属性赋值-注入"><a href="#给Bean属性赋值-注入" class="headerlink" title="给Bean属性赋值(注入)"></a>给Bean属性赋值(注入)</h2><ul><li><p>通过构造方法</p></li><li><p>通过注入(set方法)</p><ul><li>如果属性是基本数据类型或String</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>peo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.pojo.People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>222<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li>如果是set,map,list,array…</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sets<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>5.DI</code></pre></li></ul><h2 id="DI-依赖注入-是什么"><a href="#DI-依赖注入-是什么" class="headerlink" title="DI(依赖注入)是什么"></a>DI(依赖注入)是什么</h2><p>​        当一个类(A)需要依赖另一个类(B)对象时,把B赋值给A的过程</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>peo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.pojo.People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>desk<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>desk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>desk<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.pojo.Desk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>​    </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-AOP</title>
      <link href="/2020/01/11/Spring-two/"/>
      <url>/2020/01/11/Spring-two/</url>
      
        <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><ul><li>AOP[Aspect Oriented Programming]:面向切面编程</li><li>正常程序执行流程都是纵向执行流程<ul><li>又叫面向编程,在原有纵向执行流程添加横切面(前置,后置通知)</li><li>不需要修改原有程序代码(体现出程序高扩展,释放部分逻辑)</li></ul></li><li>面向切面编程是什么?<ul><li>在程序原有纵向执行流程中,针对某一个或某一些方法添加通知,形成横面切面过程就叫做面向切面编程</li></ul></li><li>常用概念<ul><li>原有功能: 切点, pointcut</li><li>前置通知: 在切点之前执行的功能. before advice</li><li>后置通知: 在切点之后执行的功能,after advice</li><li>异常通知: 如果切点执行过程中出现异常,会触发异常通知.throws advice</li><li>切面: 所有功能总称</li><li>织入: 把切面嵌入到原有功能的过程叫做织入</li></ul></li></ul><h2 id="Schema-based实现AOP"><a href="#Schema-based实现AOP" class="headerlink" title="Schema-based实现AOP"></a>Schema-based实现AOP</h2><ul><li>每个通知都需要实现接口或类</li><li>配置spring 配置文件时在\<a href="aop:config\" target="_blank" rel="noopener">aop:config\</a>配置</li><li>实现步骤<ul><li>新建前置通知类<ul><li>arg0: 切点方法对象Method 对象</li><li>arg1: 切点方法参数</li><li>arg2:切点在哪个对象中</li></ul></li></ul></li></ul><pre class=" language-JAVA"><code class="language-JAVA">  public class MyBeforeAdvice implements MethodBeforeAdvice {      @Override      public void before(Method arg0, Object[] arg1, Object arg2) throws Throwable {          System.out.println("执行前置通知");      }  }</code></pre><ul><li>新建后置通知类<ul><li>arg0: 切点方法返回值</li><li>arg1:切点方法对象</li><li>arg2:切点方法参数</li><li>arg3:切点方法所在类的对象</li></ul></li></ul><pre class=" language-JAVA"><code class="language-JAVA">  public class MyAfterAdvice implements AfterReturningAdvice {      @Override      public void afterReturning(Object arg0, Method arg1,Object[] arg2,Object arg3) throws Throwable {          System.out.println("执行后置通知");      }  }</code></pre><ul><li>配置spring 配置文件<ul><li>引入aop 命名空间</li><li>配置通知类的<bean></bean></li><li>配置切面</li><li>*通配符,匹配任意方法名,任意类名,任意一级包名</li><li>如果希望匹配任意方法参数(..)</li></ul></li></ul><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置通知类对象,在切面中引入--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mybefore<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.advice.MyBeforeAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myafter<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.advice.MyAfterAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置切面--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置切点--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.bjsxt.test.Demo.demo2())<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 通知--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mybefore<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myafter<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置Demo 类,测试使用--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.test.Demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li>异常通知<ul><li>新建一个类实现throwsAdvice 接口,必须自己写方法,且必须叫afterThrowing,有两种参数方式,必须是1 个或4 个,异常类型要与切点报的异常类型一致</li></ul></li></ul><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThrow</span> <span class="token keyword">implements</span> <span class="token class-name">ThrowsAdvice</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*       public void afterThrowing(Method m, Object[] args,Object target, Exception ex) {               System.out.println("执行异常通知");   }*/</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行异常通过-schema-base 方式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mythrow<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.advice.MyThrow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.bjsxt.test.Demo.demo1())<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mythrow<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.test.Demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li>环绕通知<ul><li>把前置通知和后置通知都写到一个通知中,组成了环绕通知</li><li>新建一个类实现MethodInterceptor接口</li></ul></li></ul><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArround</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation arg0<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕-前置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Object result <span class="token operator">=</span> arg0<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放行,调用切点方式</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕-后置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myarround<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.advice.MyArround<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.bjsxt.test.Demo.demo1())<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myarround<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.test.Demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="AspectJ实现AOP"><a href="#AspectJ实现AOP" class="headerlink" title="AspectJ实现AOP"></a>AspectJ实现AOP</h2><ul><li>新建类,不用实现,类中方法名任意</li></ul><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAdvice</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mybefore</span><span class="token punctuation">(</span>String name1<span class="token punctuation">,</span><span class="token keyword">int</span> age1<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置"</span><span class="token operator">+</span>name1 <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myaftering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myafter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mythrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> Object <span class="token function">myarround</span><span class="token punctuation">(</span>ProceedingJoinPoint p<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行环绕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕-前置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Object result <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>     </code></pre><ul><li><p>配置spring 配置文件</p><ul><li><p>&lt;aop: xxxx/&gt; 表示什么通知</p></li><li><p>\<a href="aop:after/\" target="_blank" rel="noopener">aop:after/\</a> 后置通知,是否出现异常都执行</p></li><li>\<a href="aop:after-returing/\" target="_blank" rel="noopener">aop:after-returing/\</a> 后置通知,只有当切点正确执行时执行</li><li>\<a href="aop:after/\" target="_blank" rel="noopener">aop:after/\</a> 和\<a href="aop:after-returing/\" target="_blank" rel="noopener">aop:after-returing/\</a> 和\<a href="aop:after-throwing/\" target="_blank" rel="noopener">aop:after-throwing/\</a>执行顺序和配置顺序有关</li><li>execution() 括号不能扩上args</li><li>中间使用and 不能使用&amp;&amp; 由spring 把and 解析成&amp;&amp;</li><li>args(名称) 名称自定义的.顺序和demo1(参数,参数)对应</li><li>\<a href="aop:before/\" target="_blank" rel="noopener">aop:before/\</a> arg-names=” 名称” 名称来源于expression=”” 中args(),名称必须一样</li><li>args() 有几个参数,arg-names 里面必须有几个参数</li><li>arg-names=”” 里面名称必须和通知方法参数名对应</li></ul></li></ul><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myadvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.bjsxt.test.Demo.demo1(String,int)) and args(name1,age1)<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.bjsxt.test.Demo.demo1(String)) and args(name1)<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mybefore<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span> <span class="token attr-name">arg</span> <span class="token attr-name">names</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name1,age1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myafter<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myaftering<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mythrow<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myarround<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypoint<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>-->      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><h2 id="使用注解-基于Aspect"><a href="#使用注解-基于Aspect" class="headerlink" title="使用注解(基于Aspect)"></a>使用注解(基于Aspect)</h2><ul><li>spring 不会自动去寻找注解,必须告诉spring 哪些包下的类中可能有注解</li></ul><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjsxt.advice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><ul><li><p>@Component相当于<bean>,如果没有参数,把类名首字母变小写,相当于<bean id=""></bean></bean></p></li><li><p>在方法上添加@Pointcut(“ ”) 定义切点</p></li></ul><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.bjsxt.test.Demo.demo1())"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// int i = 5/0;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><ul><li>在通知类中配置,@Component 类被spring 管理,@Aspect 相当于<a href="aop:aspect/" target="_blank" rel="noopener">aop:aspect/</a>表示通知方法在当前类中</li></ul><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@Aspect</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAdvice</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"com.bjsxt.test.Demo.demo1()"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mybefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"com.bjsxt.test.Demo.demo1()"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myafter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"com.bjsxt.test.Demo.demo1()"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mythrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"com.bjsxt.test.Demo.demo1()"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> Object <span class="token function">myarround</span><span class="token punctuation">(</span>ProceedingJoinPoint p<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕-前置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Object result <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕-后置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h2><ul><li><p>优点</p><ul><li>保护真实对象</li><li>让真实对象职责更明确</li><li>扩展</li></ul></li><li><p>静态代理</p><ul><li>由代理对象代理所有真实对象的功能,自己编写代理类,每个代理的功能需要单独编写</li><li>缺点当代理功能比较多时,代理类中方法需要写很多</li></ul></li><li><p>动态代理</p><ul><li>为了解决静态代理频繁编写代理功能缺点</li><li>JDK 提供的</li><li>cglib 动态代理</li></ul></li><li><p>JDK 动态代理</p><ul><li>和cglib 动态代理对比<ul><li>优点: jdk 自带,不需要额外导入jar</li><li>缺点: 真实对象必须实现接口,利用反射机制.效率不高</li><li>使用JDK 动态代理时可能出现异常(出现原因:希望把接口对象转换为具体真实对象)</li></ul></li></ul></li><li><p>cglib 动态代理</p><ul><li><p>优点: 基于字节码,生成真实对象的子类,运行效率高于JDK 动态代理,不需要实现接口</p></li><li><p>缺点: 非JDK 功能,需要额外导入jar</p></li><li><p>使用spring aop 时,只要出现Proxy 和真实对象转换异常,设置为true 使用cglib,设置为false 使用jdk(默认值)</p></li></ul></li></ul><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java Frame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
